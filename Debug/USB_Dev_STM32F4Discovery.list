
USB_Dev_STM32F4Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800302c  0800302c  0001302c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000016c  20000000  080030dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002016c  2**0
                  CONTENTS
  8 .bss          000008cc  2000016c  2000016c  0002016c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000a38  20000a38  0002016c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017cfc  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000333a  00000000  00000000  00037e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005310  00000000  00000000  0003b1d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000928  00000000  00000000  000404e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  00040e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005729  00000000  00000000  000418b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003b73  00000000  00000000  00046fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004ab54  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001864  00000000  00000000  0004abd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000016c 	.word	0x2000016c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003014 	.word	0x08003014

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000170 	.word	0x20000170
 80001c4:	08003014 	.word	0x08003014

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8a8 	bl	8000644 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f85e 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	2000009c 	.word	0x2000009c
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f82f 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f002 f9de 	bl	8002908 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000198 	.word	0x20000198
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000198 	.word	0x20000198

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfaf      	iteee	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
 8000610:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	bfa5      	ittet	ge
 8000614:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800062c:	0942      	lsrs	r2, r0, #5
 800062e:	2301      	movs	r3, #1
 8000630:	f000 001f 	and.w	r0, r0, #31
 8000634:	fa03 f000 	lsl.w	r0, r3, r0
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <HAL_NVIC_EnableIRQ+0x14>)
 800063a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100

08000644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	3801      	subs	r0, #1
 8000646:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064a:	d20a      	bcs.n	8000662 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	21f0      	movs	r1, #240	; 0xf0
 8000654:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000662:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000672:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000674:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000676:	bf0c      	ite	eq
 8000678:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800067c:	f022 0204 	bicne.w	r2, r2, #4
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4770      	bx	lr
 8000684:	e000e010 	.word	0xe000e010

08000688 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000688:	4770      	bx	lr

0800068a <HAL_SYSTICK_IRQHandler>:
{
 800068a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800068c:	f7ff fffc 	bl	8000688 <HAL_SYSTICK_Callback>
 8000690:	bd08      	pop	{r3, pc}
	...

08000694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000698:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800084c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a0:	4a68      	ldr	r2, [pc, #416]	; (8000844 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006a2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000850 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006a8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006aa:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ae:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006b0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006b8:	45b6      	cmp	lr, r6
 80006ba:	f040 80ae 	bne.w	800081a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006be:	684c      	ldr	r4, [r1, #4]
 80006c0:	f024 0710 	bic.w	r7, r4, #16
 80006c4:	2f02      	cmp	r7, #2
 80006c6:	d116      	bne.n	80006f6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006c8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006cc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006d4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006dc:	f04f 0c0f 	mov.w	ip, #15
 80006e0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006e4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006e8:	690d      	ldr	r5, [r1, #16]
 80006ea:	fa05 f50b 	lsl.w	r5, r5, fp
 80006ee:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006f2:	f8ca 5020 	str.w	r5, [sl, #32]
 80006f6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006fa:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006fc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000700:	fa05 f50a 	lsl.w	r5, r5, sl
 8000704:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000706:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800070a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800070e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000712:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000714:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000718:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800071a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800071e:	d811      	bhi.n	8000744 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000720:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000722:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000726:	68cf      	ldr	r7, [r1, #12]
 8000728:	fa07 fc0a 	lsl.w	ip, r7, sl
 800072c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000730:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000732:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000734:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000738:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800073c:	409f      	lsls	r7, r3
 800073e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000742:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000744:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000746:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000748:	688f      	ldr	r7, [r1, #8]
 800074a:	fa07 f70a 	lsl.w	r7, r7, sl
 800074e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000750:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000752:	00e5      	lsls	r5, r4, #3
 8000754:	d561      	bpl.n	800081a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	f04f 0b00 	mov.w	fp, #0
 800075a:	f8cd b00c 	str.w	fp, [sp, #12]
 800075e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000762:	4d39      	ldr	r5, [pc, #228]	; (8000848 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000764:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000768:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800076c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000770:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000774:	9703      	str	r7, [sp, #12]
 8000776:	9f03      	ldr	r7, [sp, #12]
 8000778:	f023 0703 	bic.w	r7, r3, #3
 800077c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000780:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000784:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000788:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000790:	f04f 0e0f 	mov.w	lr, #15
 8000794:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000798:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800079a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079e:	d043      	beq.n	8000828 <HAL_GPIO_Init+0x194>
 80007a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a4:	42a8      	cmp	r0, r5
 80007a6:	d041      	beq.n	800082c <HAL_GPIO_Init+0x198>
 80007a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ac:	42a8      	cmp	r0, r5
 80007ae:	d03f      	beq.n	8000830 <HAL_GPIO_Init+0x19c>
 80007b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b4:	42a8      	cmp	r0, r5
 80007b6:	d03d      	beq.n	8000834 <HAL_GPIO_Init+0x1a0>
 80007b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007bc:	42a8      	cmp	r0, r5
 80007be:	d03b      	beq.n	8000838 <HAL_GPIO_Init+0x1a4>
 80007c0:	4548      	cmp	r0, r9
 80007c2:	d03b      	beq.n	800083c <HAL_GPIO_Init+0x1a8>
 80007c4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	d039      	beq.n	8000840 <HAL_GPIO_Init+0x1ac>
 80007cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d0:	42a8      	cmp	r0, r5
 80007d2:	bf14      	ite	ne
 80007d4:	2508      	movne	r5, #8
 80007d6:	2507      	moveq	r5, #7
 80007d8:	fa05 f50c 	lsl.w	r5, r5, ip
 80007dc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007e0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007e2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007e6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007ea:	bf0c      	ite	eq
 80007ec:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ee:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007f0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007f2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007f4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007f8:	bf0c      	ite	eq
 80007fa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007fc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007fe:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000800:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000802:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000806:	bf0c      	ite	eq
 8000808:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800080a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800080c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800080e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000810:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000812:	bf54      	ite	pl
 8000814:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000816:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000818:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081a:	3301      	adds	r3, #1
 800081c:	2b10      	cmp	r3, #16
 800081e:	f47f af44 	bne.w	80006aa <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000822:	b005      	add	sp, #20
 8000824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000828:	465d      	mov	r5, fp
 800082a:	e7d5      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 800082c:	2501      	movs	r5, #1
 800082e:	e7d3      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000830:	2502      	movs	r5, #2
 8000832:	e7d1      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000834:	2503      	movs	r5, #3
 8000836:	e7cf      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000838:	2504      	movs	r5, #4
 800083a:	e7cd      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 800083c:	2505      	movs	r5, #5
 800083e:	e7cb      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000840:	2506      	movs	r5, #6
 8000842:	e7c9      	b.n	80007d8 <HAL_GPIO_Init+0x144>
 8000844:	40013c00 	.word	0x40013c00
 8000848:	40020000 	.word	0x40020000
 800084c:	40023800 	.word	0x40023800
 8000850:	40021400 	.word	0x40021400

08000854 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000854:	6903      	ldr	r3, [r0, #16]
 8000856:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000858:	bf14      	ite	ne
 800085a:	2001      	movne	r0, #1
 800085c:	2000      	moveq	r0, #0
 800085e:	4770      	bx	lr

08000860 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000860:	b10a      	cbz	r2, 8000866 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000862:	6181      	str	r1, [r0, #24]
 8000864:	4770      	bx	lr
 8000866:	0409      	lsls	r1, r1, #16
 8000868:	e7fb      	b.n	8000862 <HAL_GPIO_WritePin+0x2>

0800086a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800086a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800086c:	4606      	mov	r6, r0
{ 
 800086e:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8000870:	2800      	cmp	r0, #0
 8000872:	d064      	beq.n	800093e <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000874:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000876:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000878:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 800087c:	f002 f8e4 	bl	8002a48 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8000880:	f854 0b10 	ldr.w	r0, [r4], #16
 8000884:	f000 fecc 	bl	8001620 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800088a:	466d      	mov	r5, sp
 800088c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800088e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000892:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000896:	e885 0003 	stmia.w	r5, {r0, r1}
 800089a:	1d37      	adds	r7, r6, #4
 800089c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80008a0:	6830      	ldr	r0, [r6, #0]
 80008a2:	f000 fe7d 	bl	80015a0 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80008a6:	2100      	movs	r1, #0
 80008a8:	6830      	ldr	r0, [r6, #0]
 80008aa:	f000 febf 	bl	800162c <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80008b2:	4632      	mov	r2, r6
 80008b4:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80008b8:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008ba:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 80008bc:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 80008c0:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 80008c2:	3101      	adds	r1, #1
 80008c4:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 80008c6:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80008ca:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 80008ce:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 80008d0:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 80008d2:	64d0      	str	r0, [r2, #76]	; 0x4c
 80008d4:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 80008d8:	d1f0      	bne.n	80008bc <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008da:	2200      	movs	r2, #0
 80008dc:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 80008e0:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008e2:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 80008e6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80008ea:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008ec:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 80008f0:	3201      	adds	r2, #1
 80008f2:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 80008f4:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008f8:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 80008fc:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000900:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000904:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000908:	6041      	str	r1, [r0, #4]
 800090a:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 800090e:	d1e8      	bne.n	80008e2 <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000912:	466d      	mov	r5, sp
 8000914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800091e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000922:	4670      	mov	r0, lr
 8000924:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000928:	f000 fe98 	bl	800165c <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 800092c:	2301      	movs	r3, #1
 800092e:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000932:	6830      	ldr	r0, [r6, #0]
 8000934:	f001 f9b5 	bl	8001ca2 <USB_DevDisconnect>
 return HAL_OK;
 8000938:	2000      	movs	r0, #0
}
 800093a:	b00b      	add	sp, #44	; 0x2c
 800093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800093e:	2001      	movs	r0, #1
 8000940:	e7fb      	b.n	800093a <HAL_PCD_Init+0xd0>

08000942 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000942:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000946:	2b01      	cmp	r3, #1
{ 
 8000948:	b510      	push	{r4, lr}
 800094a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800094c:	d00c      	beq.n	8000968 <HAL_PCD_Start+0x26>
 800094e:	2301      	movs	r3, #1
 8000950:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000954:	6800      	ldr	r0, [r0, #0]
 8000956:	f001 f998 	bl	8001c8a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800095a:	6820      	ldr	r0, [r4, #0]
 800095c:	f000 fe5a 	bl	8001614 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000960:	2000      	movs	r0, #0
 8000962:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000966:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000968:	2002      	movs	r0, #2
}
 800096a:	bd10      	pop	{r4, pc}

0800096c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800096c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000970:	f8d0 9000 	ldr.w	r9, [r0]
{
 8000974:	b087      	sub	sp, #28
 8000976:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000978:	4648      	mov	r0, r9
 800097a:	f001 f9cc 	bl	8001d16 <USB_GetMode>
 800097e:	9002      	str	r0, [sp, #8]
 8000980:	2800      	cmp	r0, #0
 8000982:	f040 812e 	bne.w	8000be2 <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000986:	6820      	ldr	r0, [r4, #0]
 8000988:	f001 f997 	bl	8001cba <USB_ReadInterrupts>
 800098c:	2800      	cmp	r0, #0
 800098e:	f000 8128 	beq.w	8000be2 <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000992:	6820      	ldr	r0, [r4, #0]
 8000994:	f001 f991 	bl	8001cba <USB_ReadInterrupts>
 8000998:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800099a:	bf48      	it	mi
 800099c:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800099e:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80009a0:	bf42      	ittt	mi
 80009a2:	6953      	ldrmi	r3, [r2, #20]
 80009a4:	f003 0302 	andmi.w	r3, r3, #2
 80009a8:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80009aa:	f001 f986 	bl	8001cba <USB_ReadInterrupts>
 80009ae:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 80009b2:	d00a      	beq.n	80009ca <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80009b4:	6820      	ldr	r0, [r4, #0]
 80009b6:	f001 f984 	bl	8001cc2 <USB_ReadDevAllOutEpInterrupt>
 80009ba:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 80009be:	4607      	mov	r7, r0
 80009c0:	46a2      	mov	sl, r4
      epnum = 0U;
 80009c2:	2500      	movs	r5, #0
      
      while ( ep_intr )
 80009c4:	2f00      	cmp	r7, #0
 80009c6:	f040 810f 	bne.w	8000be8 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80009ca:	6820      	ldr	r0, [r4, #0]
 80009cc:	f001 f975 	bl	8001cba <USB_ReadInterrupts>
 80009d0:	0341      	lsls	r1, r0, #13
 80009d2:	d50b      	bpl.n	80009ec <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80009d4:	6820      	ldr	r0, [r4, #0]
 80009d6:	f001 f97c 	bl	8001cd2 <USB_ReadDevAllInEpInterrupt>
 80009da:	4626      	mov	r6, r4
 80009dc:	9003      	str	r0, [sp, #12]
 80009de:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 80009e2:	2500      	movs	r5, #0
      
      while ( ep_intr )
 80009e4:	9b03      	ldr	r3, [sp, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 813f 	bne.w	8000c6a <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80009ec:	6820      	ldr	r0, [r4, #0]
 80009ee:	f001 f964 	bl	8001cba <USB_ReadInterrupts>
 80009f2:	2800      	cmp	r0, #0
 80009f4:	da0d      	bge.n	8000a12 <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80009f6:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 80009fa:	f023 0301 	bic.w	r3, r3, #1
 80009fe:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8000a02:	4620      	mov	r0, r4
 8000a04:	f002 f89e 	bl	8002b44 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000a08:	6822      	ldr	r2, [r4, #0]
 8000a0a:	6953      	ldr	r3, [r2, #20]
 8000a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a10:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000a12:	6820      	ldr	r0, [r4, #0]
 8000a14:	f001 f951 	bl	8001cba <USB_ReadInterrupts>
 8000a18:	0506      	lsls	r6, r0, #20
 8000a1a:	d50b      	bpl.n	8000a34 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000a1c:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8000a20:	07d8      	lsls	r0, r3, #31
 8000a22:	d502      	bpl.n	8000a2a <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8000a24:	4620      	mov	r0, r4
 8000a26:	f002 f875 	bl	8002b14 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000a2a:	6822      	ldr	r2, [r4, #0]
 8000a2c:	6953      	ldr	r3, [r2, #20]
 8000a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a32:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000a34:	6820      	ldr	r0, [r4, #0]
 8000a36:	f001 f940 	bl	8001cba <USB_ReadInterrupts>
 8000a3a:	04c1      	lsls	r1, r0, #19
 8000a3c:	d537      	bpl.n	8000aae <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000a3e:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8000a42:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000a44:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000a46:	f023 0301 	bic.w	r3, r3, #1
 8000a4a:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	f000 fea1 	bl	8001794 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a52:	6861      	ldr	r1, [r4, #4]
 8000a54:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000a58:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a5a:	9802      	ldr	r0, [sp, #8]
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	f040 8192 	bne.w	8000d86 <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000a68:	69f3      	ldr	r3, [r6, #28]
 8000a6a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000a6e:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8000a70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 818f 	beq.w	8000d96 <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000a78:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000a7c:	f043 030b 	orr.w	r3, r3, #11
 8000a80:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000a84:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000a86:	f043 030b 	orr.w	r3, r3, #11
 8000a8a:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000a8c:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000a90:	7c21      	ldrb	r1, [r4, #16]
 8000a92:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000a94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000a98:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000a9c:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000aa0:	f001 f958 	bl	8001d54 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000aa4:	6822      	ldr	r2, [r4, #0]
 8000aa6:	6953      	ldr	r3, [r2, #20]
 8000aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aac:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000aae:	6820      	ldr	r0, [r4, #0]
 8000ab0:	f001 f903 	bl	8001cba <USB_ReadInterrupts>
 8000ab4:	0482      	lsls	r2, r0, #18
 8000ab6:	d51d      	bpl.n	8000af4 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000ab8:	6820      	ldr	r0, [r4, #0]
 8000aba:	f001 f930 	bl	8001d1e <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000abe:	6820      	ldr	r0, [r4, #0]
 8000ac0:	68c3      	ldr	r3, [r0, #12]
 8000ac2:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000ac6:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000ac8:	f000 fe8d 	bl	80017e6 <USB_GetDevSpeed>
 8000acc:	2800      	cmp	r0, #0
 8000ace:	f040 816b 	bne.w	8000da8 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ad2:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000ad4:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ada:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000adc:	68d3      	ldr	r3, [r2, #12]
 8000ade:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000ae2:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f002 f804 	bl	8002af2 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000aea:	6822      	ldr	r2, [r4, #0]
 8000aec:	6953      	ldr	r3, [r2, #20]
 8000aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af2:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000af4:	6820      	ldr	r0, [r4, #0]
 8000af6:	f001 f8e0 	bl	8001cba <USB_ReadInterrupts>
 8000afa:	06c3      	lsls	r3, r0, #27
 8000afc:	d52b      	bpl.n	8000b56 <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000afe:	6822      	ldr	r2, [r4, #0]
 8000b00:	6993      	ldr	r3, [r2, #24]
 8000b02:	f023 0310 	bic.w	r3, r3, #16
 8000b06:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000b08:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b0c:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000b10:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000b12:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b16:	f040 81a8 	bne.w	8000e6a <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000b1a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000b1e:	421e      	tst	r6, r3
 8000b20:	d014      	beq.n	8000b4c <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000b22:	271c      	movs	r7, #28
 8000b24:	fb07 4708 	mla	r7, r7, r8, r4
 8000b28:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000b2c:	4632      	mov	r2, r6
 8000b2e:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000b32:	4648      	mov	r0, r9
 8000b34:	f001 f853 	bl	8001bde <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000b38:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000b3c:	4433      	add	r3, r6
 8000b3e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000b42:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000b46:	441e      	add	r6, r3
 8000b48:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b4c:	6822      	ldr	r2, [r4, #0]
 8000b4e:	6993      	ldr	r3, [r2, #24]
 8000b50:	f043 0310 	orr.w	r3, r3, #16
 8000b54:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000b56:	6820      	ldr	r0, [r4, #0]
 8000b58:	f001 f8af 	bl	8001cba <USB_ReadInterrupts>
 8000b5c:	0707      	lsls	r7, r0, #28
 8000b5e:	d507      	bpl.n	8000b70 <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000b60:	4620      	mov	r0, r4
 8000b62:	f001 ffc2 	bl	8002aea <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000b66:	6822      	ldr	r2, [r4, #0]
 8000b68:	6953      	ldr	r3, [r2, #20]
 8000b6a:	f003 0308 	and.w	r3, r3, #8
 8000b6e:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b70:	6820      	ldr	r0, [r4, #0]
 8000b72:	f001 f8a2 	bl	8001cba <USB_ReadInterrupts>
 8000b76:	02c6      	lsls	r6, r0, #11
 8000b78:	d508      	bpl.n	8000b8c <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000b7a:	b2e9      	uxtb	r1, r5
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f001 ffe9 	bl	8002b54 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b82:	6822      	ldr	r2, [r4, #0]
 8000b84:	6953      	ldr	r3, [r2, #20]
 8000b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8a:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000b8c:	6820      	ldr	r0, [r4, #0]
 8000b8e:	f001 f894 	bl	8001cba <USB_ReadInterrupts>
 8000b92:	0280      	lsls	r0, r0, #10
 8000b94:	d508      	bpl.n	8000ba8 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000b96:	b2e9      	uxtb	r1, r5
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f001 ffd7 	bl	8002b4c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b9e:	6822      	ldr	r2, [r4, #0]
 8000ba0:	6953      	ldr	r3, [r2, #20]
 8000ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba6:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000ba8:	6820      	ldr	r0, [r4, #0]
 8000baa:	f001 f886 	bl	8001cba <USB_ReadInterrupts>
 8000bae:	0041      	lsls	r1, r0, #1
 8000bb0:	d507      	bpl.n	8000bc2 <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f001 ffd2 	bl	8002b5c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000bb8:	6822      	ldr	r2, [r4, #0]
 8000bba:	6953      	ldr	r3, [r2, #20]
 8000bbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bc0:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000bc2:	6820      	ldr	r0, [r4, #0]
 8000bc4:	f001 f879 	bl	8001cba <USB_ReadInterrupts>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	d50a      	bpl.n	8000be2 <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000bd0:	076b      	lsls	r3, r5, #29
 8000bd2:	d502      	bpl.n	8000bda <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	f001 ffc5 	bl	8002b64 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	4315      	orrs	r5, r2
 8000be0:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000be2:	b007      	add	sp, #28
 8000be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8000be8:	07f8      	lsls	r0, r7, #31
 8000bea:	d538      	bpl.n	8000c5e <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000bec:	fa5f fb85 	uxtb.w	fp, r5
 8000bf0:	4659      	mov	r1, fp
 8000bf2:	6820      	ldr	r0, [r4, #0]
 8000bf4:	f001 f875 	bl	8001ce2 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000bf8:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000bfc:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000bfe:	d021      	beq.n	8000c44 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8000c00:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c02:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8000c04:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c06:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8000c08:	d10c      	bne.n	8000c24 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000c0a:	6931      	ldr	r1, [r6, #16]
 8000c0c:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8000c10:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000c14:	1a41      	subs	r1, r0, r1
 8000c16:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000c1a:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8000c1e:	4408      	add	r0, r1
 8000c20:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000c24:	4659      	mov	r1, fp
 8000c26:	4620      	mov	r0, r4
 8000c28:	f001 ff4e 	bl	8002ac8 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000c2c:	6921      	ldr	r1, [r4, #16]
 8000c2e:	2901      	cmp	r1, #1
 8000c30:	d108      	bne.n	8000c44 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000c32:	b93d      	cbnz	r5, 8000c44 <HAL_PCD_IRQHandler+0x2d8>
 8000c34:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000c38:	b922      	cbnz	r2, 8000c44 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000c3a:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000c3e:	6820      	ldr	r0, [r4, #0]
 8000c40:	f001 f888 	bl	8001d54 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000c44:	f018 0f08 	tst.w	r8, #8
 8000c48:	d004      	beq.n	8000c54 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f001 ff36 	bl	8002abc <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000c50:	2308      	movs	r3, #8
 8000c52:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000c54:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000c58:	bf1c      	itt	ne
 8000c5a:	2310      	movne	r3, #16
 8000c5c:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8000c5e:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000c60:	087f      	lsrs	r7, r7, #1
 8000c62:	3620      	adds	r6, #32
 8000c64:	f10a 0a1c 	add.w	sl, sl, #28
 8000c68:	e6ac      	b.n	80009c4 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8000c6a:	9b03      	ldr	r3, [sp, #12]
 8000c6c:	07da      	lsls	r2, r3, #31
 8000c6e:	d558      	bpl.n	8000d22 <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000c70:	fa5f fb85 	uxtb.w	fp, r5
 8000c74:	4659      	mov	r1, fp
 8000c76:	6820      	ldr	r0, [r4, #0]
 8000c78:	f001 f83d 	bl	8001cf6 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000c7c:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000c7e:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000c80:	d520      	bpl.n	8000cc4 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000c82:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8000c86:	2101      	movs	r1, #1
 8000c88:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000c8a:	ea23 0301 	bic.w	r3, r3, r1
 8000c8e:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000c92:	2301      	movs	r3, #1
 8000c94:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000c98:	6923      	ldr	r3, [r4, #16]
 8000c9a:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000c9c:	bf01      	itttt	eq
 8000c9e:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8000ca0:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8000ca2:	189b      	addeq	r3, r3, r2
 8000ca4:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000ca6:	4659      	mov	r1, fp
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f001 ff16 	bl	8002ada <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000cae:	6921      	ldr	r1, [r4, #16]
 8000cb0:	2901      	cmp	r1, #1
 8000cb2:	d107      	bne.n	8000cc4 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000cb4:	b935      	cbnz	r5, 8000cc4 <HAL_PCD_IRQHandler+0x358>
 8000cb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cb8:	b923      	cbnz	r3, 8000cc4 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000cba:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000cbe:	6820      	ldr	r0, [r4, #0]
 8000cc0:	f001 f848 	bl	8001d54 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000cc4:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000cc6:	bf44      	itt	mi
 8000cc8:	2308      	movmi	r3, #8
 8000cca:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000cce:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000cd0:	bf44      	itt	mi
 8000cd2:	2310      	movmi	r3, #16
 8000cd4:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000cd8:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000cda:	bf44      	itt	mi
 8000cdc:	2340      	movmi	r3, #64	; 0x40
 8000cde:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000ce2:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000ce4:	bf44      	itt	mi
 8000ce6:	2302      	movmi	r3, #2
 8000ce8:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000cec:	063f      	lsls	r7, r7, #24
 8000cee:	d518      	bpl.n	8000d22 <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000cf4:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8000cf6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000cf8:	1aff      	subs	r7, r7, r3
 8000cfa:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000cfc:	429f      	cmp	r7, r3
 8000cfe:	bf28      	it	cs
 8000d00:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d02:	9b04      	ldr	r3, [sp, #16]
 8000d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000d08:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d0c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8000d10:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d14:	9305      	str	r3, [sp, #20]
 8000d16:	9b05      	ldr	r3, [sp, #20]
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4553      	cmp	r3, sl
 8000d1e:	d808      	bhi.n	8000d32 <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8000d20:	b32f      	cbz	r7, 8000d6e <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 8000d22:	9b03      	ldr	r3, [sp, #12]
 8000d24:	085b      	lsrs	r3, r3, #1
        epnum++;
 8000d26:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000d28:	9303      	str	r3, [sp, #12]
 8000d2a:	361c      	adds	r6, #28
 8000d2c:	f108 0820 	add.w	r8, r8, #32
 8000d30:	e658      	b.n	80009e4 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8000d32:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000d34:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d9f2      	bls.n	8000d20 <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0f0      	beq.n	8000d20 <HAL_PCD_IRQHandler+0x3b4>
 8000d3e:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000d40:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	429f      	cmp	r7, r3
 8000d46:	bf28      	it	cs
 8000d48:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000d4a:	7c23      	ldrb	r3, [r4, #16]
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	465a      	mov	r2, fp
 8000d50:	b2bb      	uxth	r3, r7
 8000d52:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000d54:	f000 ff2f 	bl	8001bb6 <USB_WritePacket>
    ep->xfer_buff  += len;
 8000d58:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000d5a:	443b      	add	r3, r7
 8000d5c:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000d5e:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8000d60:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8000d64:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8000d66:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8000d6a:	6533      	str	r3, [r6, #80]	; 0x50
 8000d6c:	e7d3      	b.n	8000d16 <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d6e:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8000d70:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d72:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8000d76:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8000d7a:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d7c:	ea23 0302 	bic.w	r3, r3, r2
 8000d80:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8000d84:	e7cd      	b.n	8000d22 <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d86:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000d88:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d8a:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000d8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d90:	9002      	str	r0, [sp, #8]
 8000d92:	3320      	adds	r3, #32
 8000d94:	e661      	b.n	8000a5a <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000d96:	6973      	ldr	r3, [r6, #20]
 8000d98:	f043 030b 	orr.w	r3, r3, #11
 8000d9c:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000d9e:	6933      	ldr	r3, [r6, #16]
 8000da0:	f043 030b 	orr.w	r3, r3, #11
 8000da4:	6133      	str	r3, [r6, #16]
 8000da6:	e671      	b.n	8000a8c <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000da8:	2303      	movs	r3, #3
 8000daa:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000dac:	2340      	movs	r3, #64	; 0x40
 8000dae:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8000db0:	f000 fbf0 	bl	8001594 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8000db4:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <HAL_PCD_IRQHandler+0x51c>)
 8000db6:	4a35      	ldr	r2, [pc, #212]	; (8000e8c <HAL_PCD_IRQHandler+0x520>)
 8000db8:	4403      	add	r3, r0
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	d804      	bhi.n	8000dca <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	e68c      	b.n	8000ae4 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8000dca:	4a31      	ldr	r2, [pc, #196]	; (8000e90 <HAL_PCD_IRQHandler+0x524>)
 8000dcc:	4931      	ldr	r1, [pc, #196]	; (8000e94 <HAL_PCD_IRQHandler+0x528>)
 8000dce:	4402      	add	r2, r0
 8000dd0:	428a      	cmp	r2, r1
 8000dd2:	d803      	bhi.n	8000ddc <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000dda:	e7f4      	b.n	8000dc6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000ddc:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000de0:	492d      	ldr	r1, [pc, #180]	; (8000e98 <HAL_PCD_IRQHandler+0x52c>)
 8000de2:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000de6:	428a      	cmp	r2, r1
 8000de8:	d803      	bhi.n	8000df2 <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000df0:	e7e9      	b.n	8000dc6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000df2:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000df6:	4929      	ldr	r1, [pc, #164]	; (8000e9c <HAL_PCD_IRQHandler+0x530>)
 8000df8:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000dfc:	428a      	cmp	r2, r1
 8000dfe:	d803      	bhi.n	8000e08 <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000e06:	e7de      	b.n	8000dc6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000e08:	4a25      	ldr	r2, [pc, #148]	; (8000ea0 <HAL_PCD_IRQHandler+0x534>)
 8000e0a:	4926      	ldr	r1, [pc, #152]	; (8000ea4 <HAL_PCD_IRQHandler+0x538>)
 8000e0c:	4402      	add	r2, r0
 8000e0e:	428a      	cmp	r2, r1
 8000e10:	d803      	bhi.n	8000e1a <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000e18:	e7d5      	b.n	8000dc6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000e1a:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <HAL_PCD_IRQHandler+0x53c>)
 8000e1c:	4923      	ldr	r1, [pc, #140]	; (8000eac <HAL_PCD_IRQHandler+0x540>)
 8000e1e:	4402      	add	r2, r0
 8000e20:	428a      	cmp	r2, r1
 8000e22:	d803      	bhi.n	8000e2c <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000e2a:	e7cc      	b.n	8000dc6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000e2c:	4a20      	ldr	r2, [pc, #128]	; (8000eb0 <HAL_PCD_IRQHandler+0x544>)
 8000e2e:	4921      	ldr	r1, [pc, #132]	; (8000eb4 <HAL_PCD_IRQHandler+0x548>)
 8000e30:	4402      	add	r2, r0
 8000e32:	428a      	cmp	r2, r1
 8000e34:	d803      	bhi.n	8000e3e <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000e3c:	e7c3      	b.n	8000dc6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000e3e:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000e42:	491d      	ldr	r1, [pc, #116]	; (8000eb8 <HAL_PCD_IRQHandler+0x54c>)
 8000e44:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000e48:	428a      	cmp	r2, r1
 8000e4a:	d803      	bhi.n	8000e54 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e52:	e7b8      	b.n	8000dc6 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_PCD_IRQHandler+0x550>)
 8000e56:	491a      	ldr	r1, [pc, #104]	; (8000ec0 <HAL_PCD_IRQHandler+0x554>)
 8000e58:	4402      	add	r2, r0
 8000e5a:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	bf94      	ite	ls
 8000e60:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e64:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000e68:	e7ad      	b.n	8000dc6 <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	f47f ae6e 	bne.w	8000b4c <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e70:	2208      	movs	r2, #8
 8000e72:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000e76:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000e78:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e7a:	f000 feb0 	bl	8001bde <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000e7e:	fb07 4708 	mla	r7, r7, r8, r4
 8000e82:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000e86:	e65c      	b.n	8000b42 <HAL_PCD_IRQHandler+0x1d6>
 8000e88:	ff275340 	.word	0xff275340
 8000e8c:	000c34ff 	.word	0x000c34ff
 8000e90:	ff1b1e40 	.word	0xff1b1e40
 8000e94:	000f423f 	.word	0x000f423f
 8000e98:	00124f7f 	.word	0x00124f7f
 8000e9c:	0013d61f 	.word	0x0013d61f
 8000ea0:	fee5b660 	.word	0xfee5b660
 8000ea4:	0016e35f 	.word	0x0016e35f
 8000ea8:	feced300 	.word	0xfeced300
 8000eac:	001b773f 	.word	0x001b773f
 8000eb0:	feb35bc0 	.word	0xfeb35bc0
 8000eb4:	002191bf 	.word	0x002191bf
 8000eb8:	0038751f 	.word	0x0038751f
 8000ebc:	fe5954e0 	.word	0xfe5954e0
 8000ec0:	00419cdf 	.word	0x00419cdf

08000ec4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8000ec4:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000ec8:	2b01      	cmp	r3, #1
{
 8000eca:	b510      	push	{r4, lr}
 8000ecc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000ece:	d009      	beq.n	8000ee4 <HAL_PCD_SetAddress+0x20>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000ed6:	6800      	ldr	r0, [r0, #0]
 8000ed8:	f000 fec7 	bl	8001c6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000edc:	2000      	movs	r0, #0
 8000ede:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000ee2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000ee4:	2002      	movs	r0, #2
}
 8000ee6:	bd10      	pop	{r4, pc}

08000ee8 <HAL_PCD_EP_Open>:
{
 8000ee8:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8000eea:	b24e      	sxtb	r6, r1
 8000eec:	2e00      	cmp	r6, #0
{
 8000eee:	4604      	mov	r4, r0
 8000ef0:	f04f 051c 	mov.w	r5, #28
 8000ef4:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000ef8:	bfb5      	itete	lt
 8000efa:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000efe:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f02:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f04:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 8000f08:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 8000f0a:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8000f0c:	bfb8      	it	lt
 8000f0e:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8000f10:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8000f12:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f14:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 8000f18:	bf04      	itt	eq
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8000f1e:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f20:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000f22:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 8000f26:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d009      	beq.n	8000f40 <HAL_PCD_EP_Open+0x58>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000f32:	6820      	ldr	r0, [r4, #0]
 8000f34:	f000 fc72 	bl	800181c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8000f40:	2002      	movs	r0, #2
}
 8000f42:	bd70      	pop	{r4, r5, r6, pc}

08000f44 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8000f44:	b24b      	sxtb	r3, r1
 8000f46:	2b00      	cmp	r3, #0
{  
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	f04f 021c 	mov.w	r2, #28
 8000f4e:	4604      	mov	r4, r0
 8000f50:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f54:	bfb5      	itete	lt
 8000f56:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f5a:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f5e:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f60:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f64:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8000f66:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f68:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000f6a:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d009      	beq.n	8000f86 <HAL_PCD_EP_Close+0x42>
 8000f72:	2301      	movs	r3, #1
 8000f74:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000f78:	6820      	ldr	r0, [r4, #0]
 8000f7a:	f000 fc8e 	bl	800189a <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000f84:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000f86:	2002      	movs	r0, #2
}
 8000f88:	bd10      	pop	{r4, pc}

08000f8a <HAL_PCD_EP_Receive>:
{
 8000f8a:	b538      	push	{r3, r4, r5, lr}
 8000f8c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f90:	241c      	movs	r4, #28
 8000f92:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8000f96:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f9a:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8000f9e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8000fa2:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8000fa4:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8000fa8:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8000fac:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8000fb0:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8000fb4:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fb6:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8000fb8:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8000fba:	bf08      	it	eq
 8000fbc:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8000fc0:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8000fc2:	b91d      	cbnz	r5, 8000fcc <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fc4:	f000 fd8a 	bl	8001adc <USB_EP0StartXfer>
}
 8000fc8:	2000      	movs	r0, #0
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fcc:	f000 fcc0 	bl	8001950 <USB_EPStartXfer>
 8000fd0:	e7fa      	b.n	8000fc8 <HAL_PCD_EP_Receive+0x3e>

08000fd2 <HAL_PCD_EP_Transmit>:
{
 8000fd2:	b538      	push	{r3, r4, r5, lr}
 8000fd4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fd8:	241c      	movs	r4, #28
 8000fda:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8000fde:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fe2:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8000fe4:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8000fea:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8000fec:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000fee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8000ff2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 8000ff6:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000ff8:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8000ffa:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8000ffc:	bf08      	it	eq
 8000ffe:	64a2      	streq	r2, [r4, #72]	; 0x48
 8001000:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8001002:	b91d      	cbnz	r5, 800100c <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001004:	f000 fd6a 	bl	8001adc <USB_EP0StartXfer>
}
 8001008:	2000      	movs	r0, #0
 800100a:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800100c:	f000 fca0 	bl	8001950 <USB_EPStartXfer>
 8001010:	e7fa      	b.n	8001008 <HAL_PCD_EP_Transmit+0x36>

08001012 <HAL_PCD_EP_SetStall>:
{
 8001012:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001014:	b24b      	sxtb	r3, r1
 8001016:	2b00      	cmp	r3, #0
 8001018:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800101c:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001020:	bfb5      	itete	lt
 8001022:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8001026:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800102a:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 800102c:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 8001030:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001032:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8001034:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8001036:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001038:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800103a:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 800103c:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001040:	4293      	cmp	r3, r2
{
 8001042:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001044:	d00f      	beq.n	8001066 <HAL_PCD_EP_SetStall+0x54>
 8001046:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 800104a:	6800      	ldr	r0, [r0, #0]
 800104c:	f000 fdd5 	bl	8001bfa <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001050:	b92d      	cbnz	r5, 800105e <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001052:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001056:	7c21      	ldrb	r1, [r4, #16]
 8001058:	6820      	ldr	r0, [r4, #0]
 800105a:	f000 fe7b 	bl	8001d54 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 800105e:	2000      	movs	r0, #0
 8001060:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001064:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001066:	2002      	movs	r0, #2
}
 8001068:	bd38      	pop	{r3, r4, r5, pc}

0800106a <HAL_PCD_EP_ClrStall>:
{
 800106a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800106c:	b24b      	sxtb	r3, r1
 800106e:	2b00      	cmp	r3, #0
{
 8001070:	4605      	mov	r5, r0
 8001072:	f04f 021c 	mov.w	r2, #28
 8001076:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800107a:	bfb5      	itete	lt
 800107c:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001080:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001084:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001086:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800108a:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 800108c:	2400      	movs	r4, #0
 800108e:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001090:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001092:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001094:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001098:	2b01      	cmp	r3, #1
 800109a:	d009      	beq.n	80010b0 <HAL_PCD_EP_ClrStall+0x46>
 800109c:	2301      	movs	r3, #1
 800109e:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 80010a2:	6828      	ldr	r0, [r5, #0]
 80010a4:	f000 fdc8 	bl	8001c38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80010a8:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 80010ac:	4620      	mov	r0, r4
 80010ae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80010b0:	2002      	movs	r0, #2
}
 80010b2:	bd38      	pop	{r3, r4, r5, pc}

080010b4 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80010b4:	6800      	ldr	r0, [r0, #0]
{
 80010b6:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80010b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 80010ba:	b921      	cbnz	r1, 80010c6 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 80010bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010c0:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 80010c2:	2000      	movs	r0, #0
 80010c4:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80010c6:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 80010c8:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80010ca:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 80010ce:	1e4e      	subs	r6, r1, #1
 80010d0:	b2ec      	uxtb	r4, r5
 80010d2:	42b4      	cmp	r4, r6
 80010d4:	f105 0501 	add.w	r5, r5, #1
 80010d8:	db06      	blt.n	80010e8 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 80010da:	313f      	adds	r1, #63	; 0x3f
 80010dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80010e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010e4:	6043      	str	r3, [r0, #4]
 80010e6:	e7ec      	b.n	80010c2 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80010e8:	3440      	adds	r4, #64	; 0x40
 80010ea:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80010ee:	6864      	ldr	r4, [r4, #4]
 80010f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80010f4:	e7ec      	b.n	80010d0 <HAL_PCDEx_SetTxFiFo+0x1c>

080010f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80010f6:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 80010f8:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80010fa:	6259      	str	r1, [r3, #36]	; 0x24
}
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001100:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001104:	4604      	mov	r4, r0
 8001106:	b918      	cbnz	r0, 8001110 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001108:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800110a:	b002      	add	sp, #8
 800110c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001110:	6803      	ldr	r3, [r0, #0]
 8001112:	07dd      	lsls	r5, r3, #31
 8001114:	d410      	bmi.n	8001138 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	0798      	lsls	r0, r3, #30
 800111a:	d458      	bmi.n	80011ce <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	071a      	lsls	r2, r3, #28
 8001120:	f100 809a 	bmi.w	8001258 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	075b      	lsls	r3, r3, #29
 8001128:	f100 80b8 	bmi.w	800129c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112c:	69a2      	ldr	r2, [r4, #24]
 800112e:	2a00      	cmp	r2, #0
 8001130:	f040 8119 	bne.w	8001366 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001134:	2000      	movs	r0, #0
 8001136:	e7e8      	b.n	800110a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001138:	4ba6      	ldr	r3, [pc, #664]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	f002 020c 	and.w	r2, r2, #12
 8001140:	2a04      	cmp	r2, #4
 8001142:	d007      	beq.n	8001154 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800114a:	2a08      	cmp	r2, #8
 800114c:	d10a      	bne.n	8001164 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	0259      	lsls	r1, r3, #9
 8001152:	d507      	bpl.n	8001164 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	4b9f      	ldr	r3, [pc, #636]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	039a      	lsls	r2, r3, #14
 800115a:	d5dc      	bpl.n	8001116 <HAL_RCC_OscConfig+0x16>
 800115c:	6863      	ldr	r3, [r4, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1d9      	bne.n	8001116 <HAL_RCC_OscConfig+0x16>
 8001162:	e7d1      	b.n	8001108 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001164:	6863      	ldr	r3, [r4, #4]
 8001166:	4d9b      	ldr	r5, [pc, #620]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116c:	d111      	bne.n	8001192 <HAL_RCC_OscConfig+0x92>
 800116e:	682b      	ldr	r3, [r5, #0]
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001176:	f7ff f9f9 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4d96      	ldr	r5, [pc, #600]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800117c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	682b      	ldr	r3, [r5, #0]
 8001180:	039b      	lsls	r3, r3, #14
 8001182:	d4c8      	bmi.n	8001116 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff f9f2 	bl	800056c <HAL_GetTick>
 8001188:	1b80      	subs	r0, r0, r6
 800118a:	2864      	cmp	r0, #100	; 0x64
 800118c:	d9f7      	bls.n	800117e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800118e:	2003      	movs	r0, #3
 8001190:	e7bb      	b.n	800110a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001192:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001196:	d104      	bne.n	80011a2 <HAL_RCC_OscConfig+0xa2>
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119e:	602b      	str	r3, [r5, #0]
 80011a0:	e7e5      	b.n	800116e <HAL_RCC_OscConfig+0x6e>
 80011a2:	682a      	ldr	r2, [r5, #0]
 80011a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011a8:	602a      	str	r2, [r5, #0]
 80011aa:	682a      	ldr	r2, [r5, #0]
 80011ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011b0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1df      	bne.n	8001176 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80011b6:	f7ff f9d9 	bl	800056c <HAL_GetTick>
 80011ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	039f      	lsls	r7, r3, #14
 80011c0:	d5a9      	bpl.n	8001116 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c2:	f7ff f9d3 	bl	800056c <HAL_GetTick>
 80011c6:	1b80      	subs	r0, r0, r6
 80011c8:	2864      	cmp	r0, #100	; 0x64
 80011ca:	d9f7      	bls.n	80011bc <HAL_RCC_OscConfig+0xbc>
 80011cc:	e7df      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ce:	4b81      	ldr	r3, [pc, #516]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	f012 0f0c 	tst.w	r2, #12
 80011d6:	d007      	beq.n	80011e8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011de:	2a08      	cmp	r2, #8
 80011e0:	d111      	bne.n	8001206 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	025e      	lsls	r6, r3, #9
 80011e6:	d40e      	bmi.n	8001206 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e8:	4b7a      	ldr	r3, [pc, #488]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	0795      	lsls	r5, r2, #30
 80011ee:	d502      	bpl.n	80011f6 <HAL_RCC_OscConfig+0xf6>
 80011f0:	68e2      	ldr	r2, [r4, #12]
 80011f2:	2a01      	cmp	r2, #1
 80011f4:	d188      	bne.n	8001108 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	6921      	ldr	r1, [r4, #16]
 80011fa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011fe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001202:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001204:	e78a      	b.n	800111c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001206:	68e2      	ldr	r2, [r4, #12]
 8001208:	4b73      	ldr	r3, [pc, #460]	; (80013d8 <HAL_RCC_OscConfig+0x2d8>)
 800120a:	b1b2      	cbz	r2, 800123a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001210:	f7ff f9ac 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	4d6f      	ldr	r5, [pc, #444]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001216:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	682b      	ldr	r3, [r5, #0]
 800121a:	0798      	lsls	r0, r3, #30
 800121c:	d507      	bpl.n	800122e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	6922      	ldr	r2, [r4, #16]
 8001222:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001226:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800122a:	602b      	str	r3, [r5, #0]
 800122c:	e776      	b.n	800111c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff f99d 	bl	800056c <HAL_GetTick>
 8001232:	1b80      	subs	r0, r0, r6
 8001234:	2802      	cmp	r0, #2
 8001236:	d9ef      	bls.n	8001218 <HAL_RCC_OscConfig+0x118>
 8001238:	e7a9      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800123a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800123c:	f7ff f996 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001240:	4d64      	ldr	r5, [pc, #400]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001242:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	0799      	lsls	r1, r3, #30
 8001248:	f57f af68 	bpl.w	800111c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff f98e 	bl	800056c <HAL_GetTick>
 8001250:	1b80      	subs	r0, r0, r6
 8001252:	2802      	cmp	r0, #2
 8001254:	d9f6      	bls.n	8001244 <HAL_RCC_OscConfig+0x144>
 8001256:	e79a      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001258:	6962      	ldr	r2, [r4, #20]
 800125a:	4b60      	ldr	r3, [pc, #384]	; (80013dc <HAL_RCC_OscConfig+0x2dc>)
 800125c:	b17a      	cbz	r2, 800127e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001262:	f7ff f983 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	4d5b      	ldr	r5, [pc, #364]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001268:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800126c:	079f      	lsls	r7, r3, #30
 800126e:	f53f af59 	bmi.w	8001124 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff f97b 	bl	800056c <HAL_GetTick>
 8001276:	1b80      	subs	r0, r0, r6
 8001278:	2802      	cmp	r0, #2
 800127a:	d9f6      	bls.n	800126a <HAL_RCC_OscConfig+0x16a>
 800127c:	e787      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800127e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001280:	f7ff f974 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	4d53      	ldr	r5, [pc, #332]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001286:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800128a:	0798      	lsls	r0, r3, #30
 800128c:	f57f af4a 	bpl.w	8001124 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001290:	f7ff f96c 	bl	800056c <HAL_GetTick>
 8001294:	1b80      	subs	r0, r0, r6
 8001296:	2802      	cmp	r0, #2
 8001298:	d9f6      	bls.n	8001288 <HAL_RCC_OscConfig+0x188>
 800129a:	e778      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129c:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 800129e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80012a4:	d128      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	9201      	str	r2, [sp, #4]
 80012a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012ba:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	4d48      	ldr	r5, [pc, #288]	; (80013e0 <HAL_RCC_OscConfig+0x2e0>)
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	05d9      	lsls	r1, r3, #23
 80012c2:	d51b      	bpl.n	80012fc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	68a3      	ldr	r3, [r4, #8]
 80012c6:	4d43      	ldr	r5, [pc, #268]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d127      	bne.n	800131c <HAL_RCC_OscConfig+0x21c>
 80012cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80012d4:	f7ff f94a 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d8:	4d3e      	ldr	r5, [pc, #248]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012da:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012dc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012e2:	079b      	lsls	r3, r3, #30
 80012e4:	d539      	bpl.n	800135a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80012e6:	2e00      	cmp	r6, #0
 80012e8:	f43f af20 	beq.w	800112c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ec:	4a39      	ldr	r2, [pc, #228]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 80012ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	e719      	b.n	800112c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80012f8:	2600      	movs	r6, #0
 80012fa:	e7df      	b.n	80012bc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001304:	f7ff f932 	bl	800056c <HAL_GetTick>
 8001308:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	05da      	lsls	r2, r3, #23
 800130e:	d4d9      	bmi.n	80012c4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001310:	f7ff f92c 	bl	800056c <HAL_GetTick>
 8001314:	1bc0      	subs	r0, r0, r7
 8001316:	2802      	cmp	r0, #2
 8001318:	d9f7      	bls.n	800130a <HAL_RCC_OscConfig+0x20a>
 800131a:	e738      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131c:	2b05      	cmp	r3, #5
 800131e:	d104      	bne.n	800132a <HAL_RCC_OscConfig+0x22a>
 8001320:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	672b      	str	r3, [r5, #112]	; 0x70
 8001328:	e7d0      	b.n	80012cc <HAL_RCC_OscConfig+0x1cc>
 800132a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	672a      	str	r2, [r5, #112]	; 0x70
 8001332:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001334:	f022 0204 	bic.w	r2, r2, #4
 8001338:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1ca      	bne.n	80012d4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800133e:	f7ff f915 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001346:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001348:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800134a:	0798      	lsls	r0, r3, #30
 800134c:	d5cb      	bpl.n	80012e6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134e:	f7ff f90d 	bl	800056c <HAL_GetTick>
 8001352:	1bc0      	subs	r0, r0, r7
 8001354:	4540      	cmp	r0, r8
 8001356:	d9f7      	bls.n	8001348 <HAL_RCC_OscConfig+0x248>
 8001358:	e719      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff f907 	bl	800056c <HAL_GetTick>
 800135e:	1bc0      	subs	r0, r0, r7
 8001360:	4540      	cmp	r0, r8
 8001362:	d9bd      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1e0>
 8001364:	e713      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001366:	4d1b      	ldr	r5, [pc, #108]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
 8001368:	68ab      	ldr	r3, [r5, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b08      	cmp	r3, #8
 8001370:	f43f aeca 	beq.w	8001108 <HAL_RCC_OscConfig+0x8>
 8001374:	4e1b      	ldr	r6, [pc, #108]	; (80013e4 <HAL_RCC_OscConfig+0x2e4>)
 8001376:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001378:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800137a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137c:	d134      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800137e:	f7ff f8f5 	bl	800056c <HAL_GetTick>
 8001382:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001384:	682b      	ldr	r3, [r5, #0]
 8001386:	0199      	lsls	r1, r3, #6
 8001388:	d41e      	bmi.n	80013c8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800138a:	6a22      	ldr	r2, [r4, #32]
 800138c:	69e3      	ldr	r3, [r4, #28]
 800138e:	4313      	orrs	r3, r2
 8001390:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001392:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001396:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001398:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800139c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139e:	4c0d      	ldr	r4, [pc, #52]	; (80013d4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013a0:	0852      	lsrs	r2, r2, #1
 80013a2:	3a01      	subs	r2, #1
 80013a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013a8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013aa:	2301      	movs	r3, #1
 80013ac:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013ae:	f7ff f8dd 	bl	800056c <HAL_GetTick>
 80013b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	019a      	lsls	r2, r3, #6
 80013b8:	f53f aebc 	bmi.w	8001134 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013bc:	f7ff f8d6 	bl	800056c <HAL_GetTick>
 80013c0:	1b40      	subs	r0, r0, r5
 80013c2:	2802      	cmp	r0, #2
 80013c4:	d9f6      	bls.n	80013b4 <HAL_RCC_OscConfig+0x2b4>
 80013c6:	e6e2      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff f8d0 	bl	800056c <HAL_GetTick>
 80013cc:	1bc0      	subs	r0, r0, r7
 80013ce:	2802      	cmp	r0, #2
 80013d0:	d9d8      	bls.n	8001384 <HAL_RCC_OscConfig+0x284>
 80013d2:	e6dc      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
 80013d4:	40023800 	.word	0x40023800
 80013d8:	42470000 	.word	0x42470000
 80013dc:	42470e80 	.word	0x42470e80
 80013e0:	40007000 	.word	0x40007000
 80013e4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80013e8:	f7ff f8c0 	bl	800056c <HAL_GetTick>
 80013ec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	682b      	ldr	r3, [r5, #0]
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	f57f ae9f 	bpl.w	8001134 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff f8b9 	bl	800056c <HAL_GetTick>
 80013fa:	1b00      	subs	r0, r0, r4
 80013fc:	2802      	cmp	r0, #2
 80013fe:	d9f6      	bls.n	80013ee <HAL_RCC_OscConfig+0x2ee>
 8001400:	e6c5      	b.n	800118e <HAL_RCC_OscConfig+0x8e>
 8001402:	bf00      	nop

08001404 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001404:	4913      	ldr	r1, [pc, #76]	; (8001454 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001406:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001408:	688b      	ldr	r3, [r1, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b04      	cmp	r3, #4
 8001410:	d003      	beq.n	800141a <HAL_RCC_GetSysClockFreq+0x16>
 8001412:	2b08      	cmp	r3, #8
 8001414:	d003      	beq.n	800141e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001416:	4810      	ldr	r0, [pc, #64]	; (8001458 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001418:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800141a:	4810      	ldr	r0, [pc, #64]	; (800145c <HAL_RCC_GetSysClockFreq+0x58>)
 800141c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800141e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001420:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001422:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001424:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001428:	bf14      	ite	ne
 800142a:	480c      	ldrne	r0, [pc, #48]	; (800145c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142c:	480a      	ldreq	r0, [pc, #40]	; (8001458 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800142e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001432:	bf18      	it	ne
 8001434:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001436:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800143a:	fba1 0100 	umull	r0, r1, r1, r0
 800143e:	f7fe fec3 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <HAL_RCC_GetSysClockFreq+0x50>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800144a:	3301      	adds	r3, #1
 800144c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800144e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001452:	bd08      	pop	{r3, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	00f42400 	.word	0x00f42400
 800145c:	007a1200 	.word	0x007a1200

08001460 <HAL_RCC_ClockConfig>:
{
 8001460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001464:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001466:	4604      	mov	r4, r0
 8001468:	b910      	cbnz	r0, 8001470 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800146a:	2001      	movs	r0, #1
 800146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_RCC_ClockConfig+0x124>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f002 020f 	and.w	r2, r2, #15
 8001478:	428a      	cmp	r2, r1
 800147a:	d328      	bcc.n	80014ce <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147c:	6821      	ldr	r1, [r4, #0]
 800147e:	078f      	lsls	r7, r1, #30
 8001480:	d42d      	bmi.n	80014de <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001482:	07c8      	lsls	r0, r1, #31
 8001484:	d440      	bmi.n	8001508 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <HAL_RCC_ClockConfig+0x124>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	f002 020f 	and.w	r2, r2, #15
 800148e:	4295      	cmp	r5, r2
 8001490:	d366      	bcc.n	8001560 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	0751      	lsls	r1, r2, #29
 8001496:	d46c      	bmi.n	8001572 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001498:	0713      	lsls	r3, r2, #28
 800149a:	d507      	bpl.n	80014ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800149c:	4a3a      	ldr	r2, [pc, #232]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 800149e:	6921      	ldr	r1, [r4, #16]
 80014a0:	6893      	ldr	r3, [r2, #8]
 80014a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ac:	f7ff ffaa 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 80014b0:	4b35      	ldr	r3, [pc, #212]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 80014b2:	4a36      	ldr	r2, [pc, #216]	; (800158c <HAL_RCC_ClockConfig+0x12c>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	40d8      	lsrs	r0, r3
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_RCC_ClockConfig+0x130>)
 80014c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff f808 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 80014c8:	2000      	movs	r0, #0
 80014ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	b2ca      	uxtb	r2, r1
 80014d0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	4299      	cmp	r1, r3
 80014da:	d1c6      	bne.n	800146a <HAL_RCC_ClockConfig+0xa>
 80014dc:	e7ce      	b.n	800147c <HAL_RCC_ClockConfig+0x1c>
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e4:	bf1e      	ittt	ne
 80014e6:	689a      	ldrne	r2, [r3, #8]
 80014e8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80014ec:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f0:	bf42      	ittt	mi
 80014f2:	689a      	ldrmi	r2, [r3, #8]
 80014f4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80014f8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	68a0      	ldr	r0, [r4, #8]
 80014fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001502:	4302      	orrs	r2, r0
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	e7bc      	b.n	8001482 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001508:	6862      	ldr	r2, [r4, #4]
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 800150c:	2a01      	cmp	r2, #1
 800150e:	d11d      	bne.n	800154c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	d0a8      	beq.n	800146a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001518:	4e1b      	ldr	r6, [pc, #108]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 800151a:	68b3      	ldr	r3, [r6, #8]
 800151c:	f023 0303 	bic.w	r3, r3, #3
 8001520:	4313      	orrs	r3, r2
 8001522:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001524:	f7ff f822 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001528:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800152c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	68b3      	ldr	r3, [r6, #8]
 8001530:	6862      	ldr	r2, [r4, #4]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800153a:	d0a4      	beq.n	8001486 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153c:	f7ff f816 	bl	800056c <HAL_GetTick>
 8001540:	1bc0      	subs	r0, r0, r7
 8001542:	4540      	cmp	r0, r8
 8001544:	d9f3      	bls.n	800152e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001546:	2003      	movs	r0, #3
}
 8001548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154c:	1e91      	subs	r1, r2, #2
 800154e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001550:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001552:	d802      	bhi.n	800155a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001554:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001558:	e7dd      	b.n	8001516 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	f013 0f02 	tst.w	r3, #2
 800155e:	e7da      	b.n	8001516 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001560:	b2ea      	uxtb	r2, r5
 8001562:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	429d      	cmp	r5, r3
 800156c:	f47f af7d 	bne.w	800146a <HAL_RCC_ClockConfig+0xa>
 8001570:	e78f      	b.n	8001492 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001572:	4905      	ldr	r1, [pc, #20]	; (8001588 <HAL_RCC_ClockConfig+0x128>)
 8001574:	68e0      	ldr	r0, [r4, #12]
 8001576:	688b      	ldr	r3, [r1, #8]
 8001578:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800157c:	4303      	orrs	r3, r0
 800157e:	608b      	str	r3, [r1, #8]
 8001580:	e78a      	b.n	8001498 <HAL_RCC_ClockConfig+0x38>
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00
 8001588:	40023800 	.word	0x40023800
 800158c:	08003046 	.word	0x08003046
 8001590:	2000009c 	.word	0x2000009c

08001594 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001594:	4b01      	ldr	r3, [pc, #4]	; (800159c <HAL_RCC_GetHCLKFreq+0x8>)
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000009c 	.word	0x2000009c

080015a0 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80015a0:	b084      	sub	sp, #16
 80015a2:	b538      	push	{r3, r4, r5, lr}
 80015a4:	ad05      	add	r5, sp, #20
 80015a6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80015aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015ac:	2b01      	cmp	r3, #1
{
 80015ae:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80015b0:	d126      	bne.n	8001600 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80015b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b8:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80015ba:	68c3      	ldr	r3, [r0, #12]
 80015bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80015c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015c4:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80015c6:	68c3      	ldr	r3, [r0, #12]
 80015c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80015cc:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80015ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80015d0:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80015d2:	bf02      	ittt	eq
 80015d4:	68c3      	ldreq	r3, [r0, #12]
 80015d6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80015da:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80015dc:	f000 fbde 	bl	8001d9c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 80015e0:	9b08      	ldr	r3, [sp, #32]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d107      	bne.n	80015f6 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80015e6:	68a3      	ldr	r3, [r4, #8]
 80015e8:	f043 0306 	orr.w	r3, r3, #6
 80015ec:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80015ee:	68a3      	ldr	r3, [r4, #8]
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 80015f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015fa:	2000      	movs	r0, #0
 80015fc:	b004      	add	sp, #16
 80015fe:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001600:	68c3      	ldr	r3, [r0, #12]
 8001602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001606:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8001608:	f000 fbc8 	bl	8001d9c <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800160c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001610:	63a3      	str	r3, [r4, #56]	; 0x38
 8001612:	e7e5      	b.n	80015e0 <USB_CoreInit+0x40>

08001614 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001614:	6883      	ldr	r3, [r0, #8]
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800161c:	2000      	movs	r0, #0
 800161e:	4770      	bx	lr

08001620 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001620:	6883      	ldr	r3, [r0, #8]
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001628:	2000      	movs	r0, #0
 800162a:	4770      	bx	lr

0800162c <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800162c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800162e:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8001630:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001632:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001636:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8001638:	d108      	bne.n	800164c <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800163a:	68c3      	ldr	r3, [r0, #12]
 800163c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001640:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8001642:	2032      	movs	r0, #50	; 0x32
 8001644:	f7fe ff98 	bl	8000578 <HAL_Delay>
  
  return HAL_OK;
}
 8001648:	2000      	movs	r0, #0
 800164a:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 800164c:	2900      	cmp	r1, #0
 800164e:	d1f8      	bne.n	8001642 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8001650:	68c3      	ldr	r3, [r0, #12]
 8001652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001656:	60c3      	str	r3, [r0, #12]
 8001658:	e7f3      	b.n	8001642 <USB_SetCurrentMode+0x16>
	...

0800165c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800165c:	b084      	sub	sp, #16
 800165e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001662:	4604      	mov	r4, r0
 8001664:	a807      	add	r0, sp, #28
 8001666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800166a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800166c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800166e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001670:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 8001672:	b9a6      	cbnz	r6, 800169e <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001678:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001680:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001684:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8001688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800168a:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800168c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8001690:	d15e      	bne.n	8001750 <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8001692:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001694:	b939      	cbnz	r1, 80016a6 <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8001696:	4620      	mov	r0, r4
 8001698:	f000 f89e 	bl	80017d8 <USB_SetDevSpeed>
 800169c:	e007      	b.n	80016ae <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800169e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80016a4:	e7e9      	b.n	800167a <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80016a6:	4619      	mov	r1, r3
 80016a8:	4620      	mov	r0, r4
 80016aa:	f000 f895 	bl	80017d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 80016ae:	2110      	movs	r1, #16
 80016b0:	4620      	mov	r0, r4
 80016b2:	f000 f86f 	bl	8001794 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80016b6:	4620      	mov	r0, r4
 80016b8:	f000 f87e 	bl	80017b8 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80016bc:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80016be:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 80016c2:	612b      	str	r3, [r5, #16]
 80016c4:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 80016c6:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80016cc:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80016ce:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 80016d2:	61eb      	str	r3, [r5, #28]
 80016d4:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80016d8:	4543      	cmp	r3, r8
 80016da:	d13b      	bne.n	8001754 <USB_DevInit+0xf8>
 80016dc:	2100      	movs	r1, #0
 80016de:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 80016e2:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80016e4:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80016e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d13e      	bne.n	800176e <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80016f0:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 80016f2:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80016f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016f8:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80016fa:	d108      	bne.n	800170e <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <USB_DevInit+0x130>)
 80016fe:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8001700:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001706:	f043 0303 	orr.w	r3, r3, #3
 800170a:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 800170c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001712:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001716:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8001718:	b91f      	cbnz	r7, 8001722 <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 800171a:	69a3      	ldr	r3, [r4, #24]
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8001722:	69a2      	ldr	r2, [r4, #24]
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <USB_DevInit+0x134>)
 8001726:	4313      	orrs	r3, r2
 8001728:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 800172a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800172c:	b11b      	cbz	r3, 8001736 <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800172e:	69a3      	ldr	r3, [r4, #24]
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8001736:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8001738:	bf01      	itttt	eq
 800173a:	69a3      	ldreq	r3, [r4, #24]
 800173c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8001740:	f043 0304 	orreq.w	r3, r3, #4
 8001744:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8001746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800174a:	2000      	movs	r0, #0
 800174c:	b004      	add	sp, #16
 800174e:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8001750:	2103      	movs	r1, #3
 8001752:	e7a0      	b.n	8001696 <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001754:	f8d2 c000 	ldr.w	ip, [r2]
 8001758:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800175c:	bfb4      	ite	lt
 800175e:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 8001760:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001762:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001764:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8001766:	f8c2 e008 	str.w	lr, [r2, #8]
 800176a:	3220      	adds	r2, #32
 800176c:	e7b4      	b.n	80016d8 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800176e:	f8d2 8000 	ldr.w	r8, [r2]
 8001772:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8001776:	bfb4      	ite	lt
 8001778:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800177c:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800177e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001780:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8001782:	f8c2 c008 	str.w	ip, [r2, #8]
 8001786:	3220      	adds	r2, #32
 8001788:	e7b0      	b.n	80016ec <USB_DevInit+0x90>
 800178a:	bf00      	nop
 800178c:	00800100 	.word	0x00800100
 8001790:	803c3800 	.word	0x803c3800

08001794 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8001794:	0189      	lsls	r1, r1, #6
 8001796:	f041 0120 	orr.w	r1, r1, #32
 800179a:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <USB_FlushTxFifo+0x20>)
 800179c:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 800179e:	3a01      	subs	r2, #1
 80017a0:	d005      	beq.n	80017ae <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80017a2:	6903      	ldr	r3, [r0, #16]
 80017a4:	f013 0320 	ands.w	r3, r3, #32
 80017a8:	d1f9      	bne.n	800179e <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80017aa:	4618      	mov	r0, r3
 80017ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 80017ae:	2003      	movs	r0, #3
}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	00030d41 	.word	0x00030d41

080017b8 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80017b8:	2310      	movs	r3, #16
 80017ba:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <USB_FlushRxFifo+0x1c>)
 80017bc:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80017be:	3a01      	subs	r2, #1
 80017c0:	d005      	beq.n	80017ce <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80017c2:	6903      	ldr	r3, [r0, #16]
 80017c4:	f013 0310 	ands.w	r3, r3, #16
 80017c8:	d1f9      	bne.n	80017be <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 80017ca:	4618      	mov	r0, r3
 80017cc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80017ce:	2003      	movs	r0, #3
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	00030d41 	.word	0x00030d41

080017d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 80017d8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80017dc:	4319      	orrs	r1, r3
 80017de:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 80017e2:	2000      	movs	r0, #0
 80017e4:	4770      	bx	lr

080017e6 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80017e6:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80017ea:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 80017ee:	f010 0006 	ands.w	r0, r0, #6
 80017f2:	d012      	beq.n	800181a <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80017f4:	6893      	ldr	r3, [r2, #8]
 80017f6:	f003 0306 	and.w	r3, r3, #6
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d00c      	beq.n	8001818 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 80017fe:	6893      	ldr	r3, [r2, #8]
 8001800:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001804:	2b06      	cmp	r3, #6
 8001806:	d007      	beq.n	8001818 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001808:	6893      	ldr	r3, [r2, #8]
 800180a:	f003 0306 	and.w	r3, r3, #6
 800180e:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8001810:	bf14      	ite	ne
 8001812:	2000      	movne	r0, #0
 8001814:	2002      	moveq	r0, #2
 8001816:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8001818:	2003      	movs	r0, #3
  }
  
  return speed;
}
 800181a:	4770      	bx	lr

0800181c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800181c:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 800181e:	784b      	ldrb	r3, [r1, #1]
 8001820:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001822:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8001826:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800182a:	2b01      	cmp	r3, #1
 800182c:	d11b      	bne.n	8001866 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 800182e:	40a3      	lsls	r3, r4
 8001830:	b29b      	uxth	r3, r3
 8001832:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001834:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001838:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800183a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	0412      	lsls	r2, r2, #16
 8001842:	d40e      	bmi.n	8001862 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001844:	688a      	ldr	r2, [r1, #8]
 8001846:	78c8      	ldrb	r0, [r1, #3]
 8001848:	681d      	ldr	r5, [r3, #0]
 800184a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800184e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001856:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 800185a:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 800185e:	4328      	orrs	r0, r5
 8001860:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8001862:	2000      	movs	r0, #0
 8001864:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800186a:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800186c:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001870:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001872:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001876:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001878:	6803      	ldr	r3, [r0, #0]
 800187a:	041b      	lsls	r3, r3, #16
 800187c:	d4f1      	bmi.n	8001862 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800187e:	688b      	ldr	r3, [r1, #8]
 8001880:	78c9      	ldrb	r1, [r1, #3]
 8001882:	6802      	ldr	r2, [r0, #0]
 8001884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001890:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001894:	4313      	orrs	r3, r2
 8001896:	6003      	str	r3, [r0, #0]
 8001898:	e7e3      	b.n	8001862 <USB_ActivateEndpoint+0x46>

0800189a <USB_DeactivateEndpoint>:
 800189a:	f000 b801 	b.w	80018a0 <USB_DeactivateDedicatedEndpoint>
	...

080018a0 <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80018a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 80018a2:	784b      	ldrb	r3, [r1, #1]
 80018a4:	2b01      	cmp	r3, #1
{
 80018a6:	460e      	mov	r6, r1
 80018a8:	4605      	mov	r5, r0
 80018aa:	7809      	ldrb	r1, [r1, #0]
 80018ac:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 80018b0:	d126      	bne.n	8001900 <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80018b2:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 80018b6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018c0:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80018c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018c6:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 80018c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 80018d0:	3a01      	subs	r2, #1
 80018d2:	d101      	bne.n	80018d8 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 80018d4:	2003      	movs	r0, #3
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 80018d8:	689c      	ldr	r4, [r3, #8]
 80018da:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 80018de:	d1f7      	bne.n	80018d0 <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 80018e0:	2110      	movs	r1, #16
 80018e2:	4628      	mov	r0, r5
 80018e4:	f7ff ff56 	bl	8001794 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 80018e8:	7831      	ldrb	r1, [r6, #0]
 80018ea:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 80018ee:	2301      	movs	r3, #1
 80018f0:	408b      	lsls	r3, r1
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	ea22 0303 	bic.w	r3, r2, r3
 80018f8:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 80018fc:	4620      	mov	r0, r4
 80018fe:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8001900:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8001904:	fb13 2301 	smlabb	r3, r3, r1, r2
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800190e:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001914:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8001916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	4a0b      	ldr	r2, [pc, #44]	; (800194c <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 800191e:	3a01      	subs	r2, #1
 8001920:	d0d8      	beq.n	80018d4 <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8001922:	6898      	ldr	r0, [r3, #8]
 8001924:	f010 0010 	ands.w	r0, r0, #16
 8001928:	d1f9      	bne.n	800191e <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800192a:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800192e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001932:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8001936:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800193a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800193e:	408a      	lsls	r2, r1
 8001940:	ea23 0302 	bic.w	r3, r3, r2
 8001944:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 8001948:	bd70      	pop	{r4, r5, r6, pc}
 800194a:	bf00      	nop
 800194c:	00030d41 	.word	0x00030d41

08001950 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001952:	784b      	ldrb	r3, [r1, #1]
 8001954:	780c      	ldrb	r4, [r1, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	694b      	ldr	r3, [r1, #20]
 800195a:	d177      	bne.n	8001a4c <USB_EPStartXfer+0xfc>
 800195c:	2620      	movs	r6, #32
 800195e:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001962:	fb16 5404 	smlabb	r4, r6, r4, r5
 8001966:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8001968:	2b00      	cmp	r3, #0
 800196a:	d138      	bne.n	80019de <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800196c:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001970:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001974:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001976:	6926      	ldr	r6, [r4, #16]
 8001978:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800197c:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800197e:	6926      	ldr	r6, [r4, #16]
 8001980:	0cf6      	lsrs	r6, r6, #19
 8001982:	04f6      	lsls	r6, r6, #19
 8001984:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8001986:	2a01      	cmp	r2, #1
 8001988:	d150      	bne.n	8001a2c <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800198a:	780c      	ldrb	r4, [r1, #0]
 800198c:	690e      	ldr	r6, [r1, #16]
 800198e:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001992:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8001994:	78ce      	ldrb	r6, [r1, #3]
 8001996:	2e01      	cmp	r6, #1
 8001998:	d10f      	bne.n	80019ba <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 800199a:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800199e:	780f      	ldrb	r7, [r1, #0]
 80019a0:	f414 7f80 	tst.w	r4, #256	; 0x100
 80019a4:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80019a8:	fb14 5407 	smlabb	r4, r4, r7, r5
 80019ac:	6827      	ldr	r7, [r4, #0]
 80019ae:	bf0c      	ite	eq
 80019b0:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80019b4:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 80019b8:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80019ba:	780f      	ldrb	r7, [r1, #0]
 80019bc:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 80019c0:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80019c2:	682c      	ldr	r4, [r5, #0]
 80019c4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80019c8:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 80019ca:	d105      	bne.n	80019d8 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 80019cc:	9200      	str	r2, [sp, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	463a      	mov	r2, r7
 80019d2:	68c9      	ldr	r1, [r1, #12]
 80019d4:	f000 f8ef 	bl	8001bb6 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 80019d8:	2000      	movs	r0, #0
 80019da:	b003      	add	sp, #12
 80019dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80019de:	0cf6      	lsrs	r6, r6, #19
 80019e0:	04f6      	lsls	r6, r6, #19
 80019e2:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80019e4:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 80019e6:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80019e8:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80019ec:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 80019f0:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 80019f2:	19de      	adds	r6, r3, r7
 80019f4:	3e01      	subs	r6, #1
 80019f6:	fbb6 f7f7 	udiv	r7, r6, r7
 80019fa:	4e37      	ldr	r6, [pc, #220]	; (8001ad8 <USB_EPStartXfer+0x188>)
 80019fc:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001a00:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8001a04:	ea46 060e 	orr.w	r6, r6, lr
 8001a08:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001a0a:	6927      	ldr	r7, [r4, #16]
 8001a0c:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001a10:	433e      	orrs	r6, r7
 8001a12:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8001a14:	78ce      	ldrb	r6, [r1, #3]
 8001a16:	2e01      	cmp	r6, #1
 8001a18:	d15a      	bne.n	8001ad0 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8001a1a:	6926      	ldr	r6, [r4, #16]
 8001a1c:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8001a20:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8001a22:	6926      	ldr	r6, [r4, #16]
 8001a24:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001a28:	6126      	str	r6, [r4, #16]
 8001a2a:	e7ac      	b.n	8001986 <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8001a2c:	78ce      	ldrb	r6, [r1, #3]
 8001a2e:	2e01      	cmp	r6, #1
 8001a30:	d0b3      	beq.n	800199a <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0ae      	beq.n	8001994 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8001a36:	f891 e000 	ldrb.w	lr, [r1]
 8001a3a:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8001a3e:	2401      	movs	r4, #1
 8001a40:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a44:	433c      	orrs	r4, r7
 8001a46:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8001a4a:	e7a3      	b.n	8001994 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001a4c:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8001a50:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001a54:	6925      	ldr	r5, [r4, #16]
 8001a56:	0ced      	lsrs	r5, r5, #19
 8001a58:	04ed      	lsls	r5, r5, #19
 8001a5a:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001a5c:	6925      	ldr	r5, [r4, #16]
 8001a5e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001a62:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001a66:	6125      	str	r5, [r4, #16]
 8001a68:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8001a6a:	b9fb      	cbnz	r3, 8001aac <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8001a6c:	6923      	ldr	r3, [r4, #16]
 8001a6e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001a72:	431d      	orrs	r5, r3
 8001a74:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001a76:	6923      	ldr	r3, [r4, #16]
 8001a78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a7c:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8001a7e:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8001a80:	bf04      	itt	eq
 8001a82:	68cb      	ldreq	r3, [r1, #12]
 8001a84:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8001a86:	78cb      	ldrb	r3, [r1, #3]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d10a      	bne.n	8001aa2 <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001a8c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001a90:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	bf0c      	ite	eq
 8001a98:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8001a9c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001aa8:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8001aaa:	e795      	b.n	80019d8 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001aac:	4e0a      	ldr	r6, [pc, #40]	; (8001ad8 <USB_EPStartXfer+0x188>)
 8001aae:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8001ab0:	442b      	add	r3, r5
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001ab8:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8001abc:	433e      	orrs	r6, r7
 8001abe:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	6926      	ldr	r6, [r4, #16]
 8001ac4:	435d      	muls	r5, r3
 8001ac6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001aca:	4335      	orrs	r5, r6
 8001acc:	6125      	str	r5, [r4, #16]
 8001ace:	e7d6      	b.n	8001a7e <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8001ad0:	2a01      	cmp	r2, #1
 8001ad2:	d1ae      	bne.n	8001a32 <USB_EPStartXfer+0xe2>
 8001ad4:	e759      	b.n	800198a <USB_EPStartXfer+0x3a>
 8001ad6:	bf00      	nop
 8001ad8:	1ff80000 	.word	0x1ff80000

08001adc <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001adc:	784b      	ldrb	r3, [r1, #1]
 8001ade:	2b01      	cmp	r3, #1
{
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	780b      	ldrb	r3, [r1, #0]
 8001ae4:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8001ae6:	d143      	bne.n	8001b70 <USB_EP0StartXfer+0x94>
 8001ae8:	2420      	movs	r4, #32
 8001aea:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001aee:	fb14 6303 	smlabb	r3, r4, r3, r6
 8001af2:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8001af4:	b9cd      	cbnz	r5, 8001b2a <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001af6:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001afa:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001afe:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001b00:	691c      	ldr	r4, [r3, #16]
 8001b02:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001b06:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001b08:	691c      	ldr	r4, [r3, #16]
 8001b0a:	0ce4      	lsrs	r4, r4, #19
 8001b0c:	04e4      	lsls	r4, r4, #19
 8001b0e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001b10:	780d      	ldrb	r5, [r1, #0]
 8001b12:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8001b16:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001b18:	681c      	ldr	r4, [r3, #0]
 8001b1a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001b1e:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8001b20:	d11b      	bne.n	8001b5a <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001b22:	690a      	ldr	r2, [r1, #16]
 8001b24:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8001b26:	2000      	movs	r0, #0
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001b2a:	0ce4      	lsrs	r4, r4, #19
 8001b2c:	04e4      	lsls	r4, r4, #19
 8001b2e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001b30:	691c      	ldr	r4, [r3, #16]
 8001b32:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001b36:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001b3a:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8001b3c:	688c      	ldr	r4, [r1, #8]
 8001b3e:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8001b40:	bf88      	it	hi
 8001b42:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001b44:	691c      	ldr	r4, [r3, #16]
 8001b46:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001b4a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001b4c:	694c      	ldr	r4, [r1, #20]
 8001b4e:	691d      	ldr	r5, [r3, #16]
 8001b50:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001b54:	432c      	orrs	r4, r5
 8001b56:	611c      	str	r4, [r3, #16]
 8001b58:	e7da      	b.n	8001b10 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 8001b5a:	694b      	ldr	r3, [r1, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0e2      	beq.n	8001b26 <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8001b60:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8001b64:	2301      	movs	r3, #1
 8001b66:	40ab      	lsls	r3, r5
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001b6e:	e7da      	b.n	8001b26 <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001b70:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001b74:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001b78:	6903      	ldr	r3, [r0, #16]
 8001b7a:	0cdb      	lsrs	r3, r3, #19
 8001b7c:	04db      	lsls	r3, r3, #19
 8001b7e:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001b80:	6903      	ldr	r3, [r0, #16]
 8001b82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001b86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8001b8a:	6103      	str	r3, [r0, #16]
 8001b8c:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8001b8e:	b105      	cbz	r5, 8001b92 <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8001b90:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001b92:	6904      	ldr	r4, [r0, #16]
 8001b94:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001b98:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001b9a:	6904      	ldr	r4, [r0, #16]
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	4323      	orrs	r3, r4
    if (dma == 1U)
 8001ba2:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001ba4:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001ba6:	bf04      	itt	eq
 8001ba8:	68cb      	ldreq	r3, [r1, #12]
 8001baa:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8001bac:	6803      	ldr	r3, [r0, #0]
 8001bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001bb2:	6003      	str	r3, [r0, #0]
 8001bb4:	e7b7      	b.n	8001b26 <USB_EP0StartXfer+0x4a>

08001bb6 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8001bb6:	b510      	push	{r4, lr}
 8001bb8:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8001bbc:	b94c      	cbnz	r4, 8001bd2 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8001bbe:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001bc0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001bc4:	f023 0303 	bic.w	r3, r3, #3
 8001bc8:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8001bcc:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8001bce:	4299      	cmp	r1, r3
 8001bd0:	d101      	bne.n	8001bd6 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001bd6:	f851 0b04 	ldr.w	r0, [r1], #4
 8001bda:	6010      	str	r0, [r2, #0]
 8001bdc:	e7f7      	b.n	8001bce <USB_WritePacket+0x18>

08001bde <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8001bde:	3203      	adds	r2, #3
 8001be0:	f022 0203 	bic.w	r2, r2, #3
 8001be4:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001be6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8001bea:	4291      	cmp	r1, r2
 8001bec:	d101      	bne.n	8001bf2 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8001bee:	4608      	mov	r0, r1
 8001bf0:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001bf2:	6803      	ldr	r3, [r0, #0]
 8001bf4:	f841 3b04 	str.w	r3, [r1], #4
 8001bf8:	e7f7      	b.n	8001bea <USB_ReadPacket+0xc>

08001bfa <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001bfa:	784b      	ldrb	r3, [r1, #1]
 8001bfc:	780a      	ldrb	r2, [r1, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	f04f 0320 	mov.w	r3, #32
 8001c04:	d10b      	bne.n	8001c1e <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8001c06:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8001c0a:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001c0e:	6803      	ldr	r3, [r0, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0b      	blt.n	8001c2c <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8001c14:	6803      	ldr	r3, [r0, #0]
 8001c16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c1a:	6003      	str	r3, [r0, #0]
 8001c1c:	e006      	b.n	8001c2c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8001c1e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001c22:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001c26:	6803      	ldr	r3, [r0, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	daf3      	bge.n	8001c14 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001c2c:	6803      	ldr	r3, [r0, #0]
 8001c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c32:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8001c34:	2000      	movs	r0, #0
 8001c36:	4770      	bx	lr

08001c38 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001c38:	784b      	ldrb	r3, [r1, #1]
 8001c3a:	780a      	ldrb	r2, [r1, #0]
 8001c3c:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c3e:	bf0c      	ite	eq
 8001c40:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c44:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8001c48:	2320      	movs	r3, #32
 8001c4a:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001c4e:	6803      	ldr	r3, [r0, #0]
 8001c50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c54:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8001c56:	78cb      	ldrb	r3, [r1, #3]
 8001c58:	3b02      	subs	r3, #2
 8001c5a:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8001c5c:	bf9e      	ittt	ls
 8001c5e:	6803      	ldrls	r3, [r0, #0]
 8001c60:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8001c66:	2000      	movs	r0, #0
 8001c68:	4770      	bx	lr

08001c6a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8001c6a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001c6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c72:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8001c76:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001c7a:	0109      	lsls	r1, r1, #4
 8001c7c:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8001c80:	4319      	orrs	r1, r3
 8001c82:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8001c86:	2000      	movs	r0, #0
 8001c88:	4770      	bx	lr

08001c8a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001c8a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8001c8c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001c90:	f023 0302 	bic.w	r3, r3, #2
 8001c94:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f7fe fc6d 	bl	8000578 <HAL_Delay>
  
  return HAL_OK;  
}
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	bd08      	pop	{r3, pc}

08001ca2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001ca2:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8001ca4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f7fe fc61 	bl	8000578 <HAL_Delay>
  
  return HAL_OK;  
}
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	bd08      	pop	{r3, pc}

08001cba <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8001cba:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8001cbc:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8001cbe:	4010      	ands	r0, r2
 8001cc0:	4770      	bx	lr

08001cc2 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001cc2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001cc6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001cca:	69c0      	ldr	r0, [r0, #28]
 8001ccc:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8001cce:	0c00      	lsrs	r0, r0, #16
 8001cd0:	4770      	bx	lr

08001cd2 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001cd2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001cd6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001cda:	69c0      	ldr	r0, [r0, #28]
 8001cdc:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8001cde:	b280      	uxth	r0, r0
 8001ce0:	4770      	bx	lr

08001ce2 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001ce2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8001ce6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8001cea:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001cee:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8001cf0:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8001cf2:	4010      	ands	r0, r2
 8001cf4:	4770      	bx	lr

08001cf6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8001cf6:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8001cf8:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8001cfc:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001d00:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001d04:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001d06:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001d0a:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001d0c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4323      	orrs	r3, r4
  return v;
}
 8001d12:	4018      	ands	r0, r3
 8001d14:	bd10      	pop	{r4, pc}

08001d16 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8001d16:	6940      	ldr	r0, [r0, #20]
}
 8001d18:	f000 0001 	and.w	r0, r0, #1
 8001d1c:	4770      	bx	lr

08001d1e <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8001d1e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001d22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d26:	f023 0307 	bic.w	r3, r3, #7
 8001d2a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001d2e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	f002 0206 	and.w	r2, r2, #6
 8001d38:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8001d3a:	bf02      	ittt	eq
 8001d3c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8001d40:	f042 0203 	orreq.w	r2, r2, #3
 8001d44:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8001d50:	2000      	movs	r0, #0
 8001d52:	4770      	bx	lr

08001d54 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8001d54:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001d56:	2400      	movs	r4, #0
 8001d58:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001d5c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001d60:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001d64:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8001d68:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001d6c:	f044 0418 	orr.w	r4, r4, #24
 8001d70:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001d74:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8001d78:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001d7a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001d7e:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001d82:	bf08      	it	eq
 8001d84:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001d88:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8001d8c:	bf04      	itt	eq
 8001d8e:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001d92:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8001d96:	2000      	movs	r0, #0
 8001d98:	bd10      	pop	{r4, pc}
	...

08001d9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	d101      	bne.n	8001da6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001da2:	2003      	movs	r0, #3
 8001da4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001da6:	6902      	ldr	r2, [r0, #16]
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	daf8      	bge.n	8001d9e <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001dac:	6903      	ldr	r3, [r0, #16]
 8001dae:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <USB_CoreReset+0x2c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001db6:	3a01      	subs	r2, #1
 8001db8:	d0f3      	beq.n	8001da2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001dba:	6903      	ldr	r3, [r0, #16]
 8001dbc:	f013 0301 	ands.w	r3, r3, #1
 8001dc0:	d1f9      	bne.n	8001db6 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8001dc2:	4618      	mov	r0, r3
}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	00030d41 	.word	0x00030d41

08001dcc <USBD_CUSTOM_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgDesc);
 8001dcc:	2329      	movs	r3, #41	; 0x29
 8001dce:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgDesc;
}
 8001dd0:	4800      	ldr	r0, [pc, #0]	; (8001dd4 <USBD_CUSTOM_HID_GetCfgDesc+0x8>)
 8001dd2:	4770      	bx	lr
 8001dd4:	20000040 	.word	0x20000040

08001dd8 <USBD_CUSTOM_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8001dd8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

  return USBD_OK;
}
 8001de2:	4770      	bx	lr

08001de4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8001de4:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8001de6:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218

  if (hhid->IsReportAvailable == 1)
 8001dea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d107      	bne.n	8001e00 <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8001df0:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8001df4:	7861      	ldrb	r1, [r4, #1]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	7820      	ldrb	r0, [r4, #0]
 8001dfa:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0;      
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	64e3      	str	r3, [r4, #76]	; 0x4c
  }

  return USBD_OK;
}
 8001e00:	2000      	movs	r0, #0
 8001e02:	bd10      	pop	{r4, pc}

08001e04 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8001e04:	230a      	movs	r3, #10
 8001e06:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8001e08:	4800      	ldr	r0, [pc, #0]	; (8001e0c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8001e0a:	4770      	bx	lr
 8001e0c:	20000090 	.word	0x20000090

08001e10 <USBD_CUSTOM_HID_DataOut>:
{
 8001e10:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;  
 8001e12:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8001e16:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8001e1a:	7869      	ldrb	r1, [r5, #1]
 8001e1c:	68db      	ldr	r3, [r3, #12]
{
 8001e1e:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0], 
 8001e20:	7828      	ldrb	r0, [r5, #0]
 8001e22:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf, 
 8001e24:	2340      	movs	r3, #64	; 0x40
 8001e26:	462a      	mov	r2, r5
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f000 ff4a 	bl	8002cc4 <USBD_LL_PrepareReceive>
}
 8001e30:	2000      	movs	r0, #0
 8001e32:	bd38      	pop	{r3, r4, r5, pc}

08001e34 <USBD_CUSTOM_HID_Setup>:
{
 8001e34:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e36:	780c      	ldrb	r4, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8001e38:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e3c:	f014 0460 	ands.w	r4, r4, #96	; 0x60
{
 8001e40:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001e42:	d02d      	beq.n	8001ea0 <USBD_CUSTOM_HID_Setup+0x6c>
 8001e44:	2c20      	cmp	r4, #32
 8001e46:	d10c      	bne.n	8001e62 <USBD_CUSTOM_HID_Setup+0x2e>
    switch (req->bRequest)
 8001e48:	784a      	ldrb	r2, [r1, #1]
 8001e4a:	3a02      	subs	r2, #2
 8001e4c:	2a09      	cmp	r2, #9
 8001e4e:	d821      	bhi.n	8001e94 <USBD_CUSTOM_HID_Setup+0x60>
 8001e50:	e8df f002 	tbb	[pc, r2]
 8001e54:	20200914 	.word	0x20200914
 8001e58:	18202020 	.word	0x18202020
 8001e5c:	0510      	.short	0x0510
      hhid->Protocol = (uint8_t)(req->wValue);
 8001e5e:	788a      	ldrb	r2, [r1, #2]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
  return USBD_OK;
 8001e62:	2400      	movs	r4, #0
 8001e64:	e01a      	b.n	8001e9c <USBD_CUSTOM_HID_Setup+0x68>
      USBD_CtlSendData (pdev, 
 8001e66:	2201      	movs	r2, #1
 8001e68:	f103 0140 	add.w	r1, r3, #64	; 0x40
      USBD_CtlSendData (pdev, 
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	f000 fb85 	bl	800257c <USBD_CtlSendData>
 8001e72:	e7f6      	b.n	8001e62 <USBD_CUSTOM_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8001e74:	884a      	ldrh	r2, [r1, #2]
 8001e76:	0a12      	lsrs	r2, r2, #8
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
 8001e7a:	e7f2      	b.n	8001e62 <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8001e82:	e7f3      	b.n	8001e6c <USBD_CUSTOM_HID_Setup+0x38>
      hhid->IsReportAvailable = 1;
 8001e84:	2201      	movs	r2, #1
 8001e86:	64da      	str	r2, [r3, #76]	; 0x4c
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, (uint8_t)(req->wLength));
 8001e88:	4628      	mov	r0, r5
 8001e8a:	798a      	ldrb	r2, [r1, #6]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f000 fb8a 	bl	80025a6 <USBD_CtlPrepareRx>
 8001e92:	e7e6      	b.n	8001e62 <USBD_CUSTOM_HID_Setup+0x2e>
      USBD_CtlError (pdev, req);
 8001e94:	4628      	mov	r0, r5
 8001e96:	f000 fb4a 	bl	800252e <USBD_CtlError>
      return USBD_FAIL; 
 8001e9a:	2402      	movs	r4, #2
}
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8001ea0:	784a      	ldrb	r2, [r1, #1]
 8001ea2:	2a0a      	cmp	r2, #10
 8001ea4:	d01a      	beq.n	8001edc <USBD_CUSTOM_HID_Setup+0xa8>
 8001ea6:	2a0b      	cmp	r2, #11
 8001ea8:	d01e      	beq.n	8001ee8 <USBD_CUSTOM_HID_Setup+0xb4>
 8001eaa:	2a06      	cmp	r2, #6
 8001eac:	d1f6      	bne.n	8001e9c <USBD_CUSTOM_HID_Setup+0x68>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8001eae:	884b      	ldrh	r3, [r1, #2]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	2b22      	cmp	r3, #34	; 0x22
 8001eb4:	d107      	bne.n	8001ec6 <USBD_CUSTOM_HID_Setup+0x92>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8001eb6:	88ca      	ldrh	r2, [r1, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8001eb8:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8001ebc:	2a21      	cmp	r2, #33	; 0x21
 8001ebe:	bf28      	it	cs
 8001ec0:	2221      	movcs	r2, #33	; 0x21
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	e7d2      	b.n	8001e6c <USBD_CUSTOM_HID_Setup+0x38>
      else if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8001ec6:	2b21      	cmp	r3, #33	; 0x21
 8001ec8:	d105      	bne.n	8001ed6 <USBD_CUSTOM_HID_Setup+0xa2>
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8001eca:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_CUSTOM_HID_Desc;   
 8001ecc:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <USBD_CUSTOM_HID_Setup+0xbc>)
        len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8001ece:	2a21      	cmp	r2, #33	; 0x21
 8001ed0:	bf28      	it	cs
 8001ed2:	2221      	movcs	r2, #33	; 0x21
 8001ed4:	e7ca      	b.n	8001e6c <USBD_CUSTOM_HID_Setup+0x38>
  uint8_t  *pbuf = NULL;
 8001ed6:	4621      	mov	r1, r4
  uint16_t len = 0;
 8001ed8:	4622      	mov	r2, r4
 8001eda:	e7c7      	b.n	8001e6c <USBD_CUSTOM_HID_Setup+0x38>
      USBD_CtlSendData (pdev,
 8001edc:	2201      	movs	r2, #1
 8001ede:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001ee2:	f000 fb4b 	bl	800257c <USBD_CtlSendData>
      break;
 8001ee6:	e7d9      	b.n	8001e9c <USBD_CUSTOM_HID_Setup+0x68>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8001ee8:	788a      	ldrb	r2, [r1, #2]
 8001eea:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8001eec:	e7d6      	b.n	8001e9c <USBD_CUSTOM_HID_Setup+0x68>
 8001eee:	bf00      	nop
 8001ef0:	2000006c 	.word	0x2000006c

08001ef4 <USBD_CUSTOM_HID_DeInit>:
{
 8001ef4:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8001ef6:	2181      	movs	r1, #129	; 0x81
{
 8001ef8:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8001efa:	f000 fe89 	bl	8002c10 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001efe:	2101      	movs	r1, #1
 8001f00:	4620      	mov	r0, r4
 8001f02:	f000 fe85 	bl	8002c10 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001f06:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001f0a:	b153      	cbz	r3, 8001f22 <USBD_CUSTOM_HID_DeInit+0x2e>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001f0c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001f14:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001f18:	f000 ffa8 	bl	8002e6c <free>
    pdev->pClassData = NULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8001f22:	2000      	movs	r0, #0
 8001f24:	bd10      	pop	{r4, pc}

08001f26 <USBD_CUSTOM_HID_Init>:
{
 8001f26:	b570      	push	{r4, r5, r6, lr}
  USBD_LL_OpenEP(pdev,
 8001f28:	2340      	movs	r3, #64	; 0x40
{
 8001f2a:	4605      	mov	r5, r0
  USBD_LL_OpenEP(pdev,
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	2181      	movs	r1, #129	; 0x81
 8001f30:	f000 fe5e 	bl	8002bf0 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8001f34:	2340      	movs	r3, #64	; 0x40
 8001f36:	2203      	movs	r2, #3
 8001f38:	2101      	movs	r1, #1
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	f000 fe58 	bl	8002bf0 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8001f40:	2054      	movs	r0, #84	; 0x54
 8001f42:	f000 ff8b 	bl	8002e5c <malloc>
 8001f46:	4606      	mov	r6, r0
 8001f48:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001f4c:	b170      	cbz	r0, 8001f6c <USBD_CUSTOM_HID_Init+0x46>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8001f4e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
    hhid->state = CUSTOM_HID_IDLE;
 8001f52:	2400      	movs	r4, #0
 8001f54:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, 
 8001f5c:	2340      	movs	r3, #64	; 0x40
 8001f5e:	4632      	mov	r2, r6
 8001f60:	2101      	movs	r1, #1
 8001f62:	4628      	mov	r0, r5
 8001f64:	f000 feae 	bl	8002cc4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8001f68:	4620      	mov	r0, r4
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
    ret = 1; 
 8001f6c:	2001      	movs	r0, #1
}
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}

08001f70 <USBD_CUSTOM_HID_SendReport>:
{
 8001f70:	b510      	push	{r4, lr}
 8001f72:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8001f74:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8001f78:	2a03      	cmp	r2, #3
 8001f7a:	d10b      	bne.n	8001f94 <USBD_CUSTOM_HID_SendReport+0x24>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8001f7c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
    if(hhid->state == CUSTOM_HID_IDLE)
 8001f80:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8001f84:	b932      	cbnz	r2, 8001f94 <USBD_CUSTOM_HID_SendReport+0x24>
      hhid->state = CUSTOM_HID_BUSY;
 8001f86:	2201      	movs	r2, #1
 8001f88:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      USBD_LL_Transmit (pdev, 
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	2181      	movs	r1, #129	; 0x81
 8001f90:	f000 fe8a 	bl	8002ca8 <USBD_LL_Transmit>
}
 8001f94:	2000      	movs	r0, #0
 8001f96:	bd10      	pop	{r4, pc}

08001f98 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8001f98:	b119      	cbz	r1, 8001fa2 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8001f9a:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8001fa2:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8001fa4:	4770      	bx	lr

08001fa6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8001fa6:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8001fa8:	b180      	cbz	r0, 8001fcc <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8001faa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001fae:	b113      	cbz	r3, 8001fb6 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001fb6:	b109      	cbz	r1, 8001fbc <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8001fb8:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8001fc2:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001fc4:	f000 fdd2 	bl	8002b6c <USBD_LL_Init>
  
  return USBD_OK; 
 8001fc8:	2000      	movs	r0, #0
 8001fca:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8001fcc:	2002      	movs	r0, #2
}
 8001fce:	bd08      	pop	{r3, pc}

08001fd0 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8001fd0:	b119      	cbz	r1, 8001fda <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8001fd2:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8001fda:	2002      	movs	r0, #2
  }
  
  return status;
}
 8001fdc:	4770      	bx	lr

08001fde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8001fde:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8001fe0:	f000 fdf8 	bl	8002bd4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	bd08      	pop	{r3, pc}

08001fe8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001fe8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8001fea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001fee:	b90b      	cbnz	r3, 8001ff4 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4798      	blx	r3
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	d1f9      	bne.n	8001ff0 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8001ffc:	bd08      	pop	{r3, pc}

08001ffe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8001ffe:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002000:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4798      	blx	r3
  return USBD_OK;
}
 8002008:	2000      	movs	r0, #0
 800200a:	bd08      	pop	{r3, pc}

0800200c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800200c:	b538      	push	{r3, r4, r5, lr}
 800200e:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002010:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8002014:	4628      	mov	r0, r5
 8002016:	f000 fa76 	bl	8002506 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800201a:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800201c:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002020:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002024:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002028:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800202c:	f001 031f 	and.w	r3, r1, #31
 8002030:	2b01      	cmp	r3, #1
 8002032:	d00e      	beq.n	8002052 <USBD_LL_SetupStage+0x46>
 8002034:	d307      	bcc.n	8002046 <USBD_LL_SetupStage+0x3a>
 8002036:	2b02      	cmp	r3, #2
 8002038:	d010      	beq.n	800205c <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800203a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800203e:	4620      	mov	r0, r4
 8002040:	f000 fdf4 	bl	8002c2c <USBD_LL_StallEP>
    break;
 8002044:	e003      	b.n	800204e <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002046:	4629      	mov	r1, r5
 8002048:	4620      	mov	r0, r4
 800204a:	f000 f8e7 	bl	800221c <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800204e:	2000      	movs	r0, #0
 8002050:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002052:	4629      	mov	r1, r5
 8002054:	4620      	mov	r0, r4
 8002056:	f000 f9db 	bl	8002410 <USBD_StdItfReq>
    break;
 800205a:	e7f8      	b.n	800204e <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800205c:	4629      	mov	r1, r5
 800205e:	4620      	mov	r0, r4
 8002060:	f000 f9ee 	bl	8002440 <USBD_StdEPReq>
    break;
 8002064:	e7f3      	b.n	800204e <USBD_LL_SetupStage+0x42>

08002066 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002066:	b538      	push	{r3, r4, r5, lr}
 8002068:	4604      	mov	r4, r0
 800206a:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800206c:	bb11      	cbnz	r1, 80020b4 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800206e:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002072:	2b03      	cmp	r3, #3
 8002074:	d10f      	bne.n	8002096 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002076:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800207a:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800207e:	4293      	cmp	r3, r2
 8002080:	d90b      	bls.n	800209a <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002082:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002084:	429a      	cmp	r2, r3
 8002086:	bf28      	it	cs
 8002088:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800208a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800208e:	b292      	uxth	r2, r2
 8002090:	4629      	mov	r1, r5
 8002092:	f000 fa97 	bl	80025c4 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002096:	2000      	movs	r0, #0
 8002098:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800209a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	b123      	cbz	r3, 80020ac <USBD_LL_DataOutStage+0x46>
 80020a2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80020a6:	2a03      	cmp	r2, #3
 80020a8:	d100      	bne.n	80020ac <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80020aa:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80020ac:	4620      	mov	r0, r4
 80020ae:	f000 fa91 	bl	80025d4 <USBD_CtlSendStatus>
 80020b2:	e7f0      	b.n	8002096 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80020b4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0eb      	beq.n	8002096 <USBD_LL_DataOutStage+0x30>
 80020be:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80020c2:	2a03      	cmp	r2, #3
 80020c4:	d1e7      	bne.n	8002096 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80020c6:	4798      	blx	r3
 80020c8:	e7e5      	b.n	8002096 <USBD_LL_DataOutStage+0x30>

080020ca <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80020ca:	b570      	push	{r4, r5, r6, lr}
 80020cc:	4613      	mov	r3, r2
 80020ce:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80020d0:	460e      	mov	r6, r1
 80020d2:	2900      	cmp	r1, #0
 80020d4:	d13d      	bne.n	8002152 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80020d6:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80020da:	2a02      	cmp	r2, #2
 80020dc:	d10f      	bne.n	80020fe <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80020de:	69c5      	ldr	r5, [r0, #28]
 80020e0:	6a02      	ldr	r2, [r0, #32]
 80020e2:	4295      	cmp	r5, r2
 80020e4:	d914      	bls.n	8002110 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80020e6:	1aaa      	subs	r2, r5, r2
 80020e8:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80020ea:	4619      	mov	r1, r3
 80020ec:	b292      	uxth	r2, r2
 80020ee:	f000 fa52 	bl	8002596 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80020f2:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80020f4:	461a      	mov	r2, r3
 80020f6:	4619      	mov	r1, r3
 80020f8:	4620      	mov	r0, r4
 80020fa:	f000 fde3 	bl	8002cc4 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80020fe:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002102:	2b01      	cmp	r3, #1
 8002104:	d102      	bne.n	800210c <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800210c:	2000      	movs	r0, #0
 800210e:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002110:	6983      	ldr	r3, [r0, #24]
 8002112:	fbb3 f5f2 	udiv	r5, r3, r2
 8002116:	fb02 3515 	mls	r5, r2, r5, r3
 800211a:	b965      	cbnz	r5, 8002136 <USBD_LL_DataInStage+0x6c>
 800211c:	429a      	cmp	r2, r3
 800211e:	d80a      	bhi.n	8002136 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002120:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002124:	4293      	cmp	r3, r2
 8002126:	d206      	bcs.n	8002136 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002128:	462a      	mov	r2, r5
 800212a:	f000 fa34 	bl	8002596 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800212e:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002132:	462b      	mov	r3, r5
 8002134:	e7de      	b.n	80020f4 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002136:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	b12b      	cbz	r3, 800214a <USBD_LL_DataInStage+0x80>
 800213e:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002142:	2a03      	cmp	r2, #3
 8002144:	d101      	bne.n	800214a <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002146:	4620      	mov	r0, r4
 8002148:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800214a:	4620      	mov	r0, r4
 800214c:	f000 fa4d 	bl	80025ea <USBD_CtlReceiveStatus>
 8002150:	e7d5      	b.n	80020fe <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002152:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0d7      	beq.n	800210c <USBD_LL_DataInStage+0x42>
 800215c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002160:	2a03      	cmp	r2, #3
 8002162:	d1d3      	bne.n	800210c <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002164:	4798      	blx	r3
 8002166:	e7d1      	b.n	800210c <USBD_LL_DataInStage+0x42>

08002168 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002168:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800216a:	2200      	movs	r2, #0
{
 800216c:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800216e:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002170:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002172:	2340      	movs	r3, #64	; 0x40
 8002174:	f000 fd3c 	bl	8002bf0 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002178:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800217a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800217e:	2200      	movs	r2, #0
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	4620      	mov	r0, r4
 8002184:	f000 fd34 	bl	8002bf0 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002188:	2301      	movs	r3, #1
 800218a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800218e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002192:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002194:	b12b      	cbz	r3, 80021a2 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002196:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800219a:	7921      	ldrb	r1, [r4, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4620      	mov	r0, r4
 80021a0:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80021a2:	2000      	movs	r0, #0
 80021a4:	bd38      	pop	{r3, r4, r5, pc}

080021a6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80021a6:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80021a8:	2000      	movs	r0, #0
 80021aa:	4770      	bx	lr

080021ac <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80021ac:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80021b0:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80021b4:	2304      	movs	r3, #4
 80021b6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80021ba:	2000      	movs	r0, #0
 80021bc:	4770      	bx	lr

080021be <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80021be:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80021c2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80021c6:	2000      	movs	r0, #0
 80021c8:	4770      	bx	lr

080021ca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80021ca:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80021cc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80021d0:	2a03      	cmp	r2, #3
 80021d2:	d104      	bne.n	80021de <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80021d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	b103      	cbz	r3, 80021de <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80021dc:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80021de:	2000      	movs	r0, #0
 80021e0:	bd08      	pop	{r3, pc}

080021e2 <USBD_LL_IsoINIncomplete>:
 80021e2:	2000      	movs	r0, #0
 80021e4:	4770      	bx	lr

080021e6 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 80021e6:	2000      	movs	r0, #0
 80021e8:	4770      	bx	lr

080021ea <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 80021ea:	2000      	movs	r0, #0
 80021ec:	4770      	bx	lr

080021ee <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80021ee:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80021f0:	2201      	movs	r2, #1
 80021f2:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80021f6:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 80021fa:	7901      	ldrb	r1, [r0, #4]
 80021fc:	6852      	ldr	r2, [r2, #4]
 80021fe:	4790      	blx	r2
   
  return USBD_OK;
}
 8002200:	2000      	movs	r0, #0
 8002202:	bd08      	pop	{r3, pc}

08002204 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002204:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002206:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002208:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800220a:	f000 fd0f 	bl	8002c2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800220e:	4620      	mov	r0, r4
 8002210:	2100      	movs	r1, #0
}
 8002212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002216:	f000 bd09 	b.w	8002c2c <USBD_LL_StallEP>
	...

0800221c <USBD_StdDevReq>:
{
 800221c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800221e:	784b      	ldrb	r3, [r1, #1]
{
 8002220:	4604      	mov	r4, r0
 8002222:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002224:	2b09      	cmp	r3, #9
 8002226:	d879      	bhi.n	800231c <USBD_StdDevReq+0x100>
 8002228:	e8df f013 	tbh	[pc, r3, lsl #1]
 800222c:	00e500c9 	.word	0x00e500c9
 8002230:	00d90078 	.word	0x00d90078
 8002234:	006d0078 	.word	0x006d0078
 8002238:	0078000a 	.word	0x0078000a
 800223c:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002240:	884b      	ldrh	r3, [r1, #2]
 8002242:	0a1a      	lsrs	r2, r3, #8
 8002244:	3a01      	subs	r2, #1
 8002246:	2a06      	cmp	r2, #6
 8002248:	d868      	bhi.n	800231c <USBD_StdDevReq+0x100>
 800224a:	e8df f002 	tbb	[pc, r2]
 800224e:	1c04      	.short	0x1c04
 8002250:	49676729 	.word	0x49676729
 8002254:	52          	.byte	0x52
 8002255:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002256:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800225a:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800225c:	7c20      	ldrb	r0, [r4, #16]
 800225e:	f10d 0106 	add.w	r1, sp, #6
 8002262:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002264:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002268:	2a00      	cmp	r2, #0
 800226a:	d067      	beq.n	800233c <USBD_StdDevReq+0x120>
 800226c:	88eb      	ldrh	r3, [r5, #6]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d064      	beq.n	800233c <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002272:	429a      	cmp	r2, r3
 8002274:	bf28      	it	cs
 8002276:	461a      	movcs	r2, r3
 8002278:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800227c:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800227e:	4620      	mov	r0, r4
 8002280:	f000 f97c 	bl	800257c <USBD_CtlSendData>
 8002284:	e05a      	b.n	800233c <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002286:	7c02      	ldrb	r2, [r0, #16]
 8002288:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800228c:	b932      	cbnz	r2, 800229c <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002290:	f10d 0006 	add.w	r0, sp, #6
 8002294:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002296:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002298:	7043      	strb	r3, [r0, #1]
 800229a:	e7e3      	b.n	8002264 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	e7f7      	b.n	8002290 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d83a      	bhi.n	800231c <USBD_StdDevReq+0x100>
 80022a6:	e8df f003 	tbb	[pc, r3]
 80022aa:	0703      	.short	0x0703
 80022ac:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80022b0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	e7d1      	b.n	800225c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80022b8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	e7cd      	b.n	800225c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80022c0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	e7c9      	b.n	800225c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80022c8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	e7c5      	b.n	800225c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80022d0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	e7c1      	b.n	800225c <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80022d8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	e7bd      	b.n	800225c <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80022e0:	7c03      	ldrb	r3, [r0, #16]
 80022e2:	b9db      	cbnz	r3, 800231c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80022e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022e8:	f10d 0006 	add.w	r0, sp, #6
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	4798      	blx	r3
 80022f0:	e7b8      	b.n	8002264 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80022f2:	7c03      	ldrb	r3, [r0, #16]
 80022f4:	b993      	cbnz	r3, 800231c <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80022f6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022fa:	f10d 0006 	add.w	r0, sp, #6
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002302:	2307      	movs	r3, #7
 8002304:	e7c8      	b.n	8002298 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002306:	888b      	ldrh	r3, [r1, #4]
 8002308:	b943      	cbnz	r3, 800231c <USBD_StdDevReq+0x100>
 800230a:	88cb      	ldrh	r3, [r1, #6]
 800230c:	b933      	cbnz	r3, 800231c <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800230e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002312:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002314:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002316:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800231a:	d103      	bne.n	8002324 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 800231c:	4620      	mov	r0, r4
 800231e:	f7ff ff71 	bl	8002204 <USBD_CtlError.constprop.0>
    break;
 8002322:	e00b      	b.n	800233c <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002324:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002328:	4629      	mov	r1, r5
 800232a:	f000 fcaf 	bl	8002c8c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800232e:	4620      	mov	r0, r4
 8002330:	f000 f950 	bl	80025d4 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002334:	b12d      	cbz	r5, 8002342 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002336:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002338:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800233c:	2000      	movs	r0, #0
 800233e:	b003      	add	sp, #12
 8002340:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002342:	2301      	movs	r3, #1
 8002344:	e7f8      	b.n	8002338 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002346:	7889      	ldrb	r1, [r1, #2]
 8002348:	4d30      	ldr	r5, [pc, #192]	; (800240c <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800234a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800234c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800234e:	d8e5      	bhi.n	800231c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002350:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002354:	2b02      	cmp	r3, #2
 8002356:	d00c      	beq.n	8002372 <USBD_StdDevReq+0x156>
 8002358:	2b03      	cmp	r3, #3
 800235a:	d1df      	bne.n	800231c <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 800235c:	b9b1      	cbnz	r1, 800238c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800235e:	2302      	movs	r3, #2
 8002360:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8002364:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8002366:	f7ff fe4a 	bl	8001ffe <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800236a:	4620      	mov	r0, r4
 800236c:	f000 f932 	bl	80025d4 <USBD_CtlSendStatus>
 8002370:	e7e4      	b.n	800233c <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002372:	2900      	cmp	r1, #0
 8002374:	d0f9      	beq.n	800236a <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002376:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002378:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800237a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800237c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002380:	4620      	mov	r0, r4
 8002382:	f7ff fe31 	bl	8001fe8 <USBD_SetClassConfig>
 8002386:	2802      	cmp	r0, #2
 8002388:	d1ef      	bne.n	800236a <USBD_StdDevReq+0x14e>
 800238a:	e7c7      	b.n	800231c <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 800238c:	6841      	ldr	r1, [r0, #4]
 800238e:	2901      	cmp	r1, #1
 8002390:	d0eb      	beq.n	800236a <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002392:	b2c9      	uxtb	r1, r1
 8002394:	f7ff fe33 	bl	8001ffe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002398:	7829      	ldrb	r1, [r5, #0]
 800239a:	6061      	str	r1, [r4, #4]
 800239c:	e7f0      	b.n	8002380 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800239e:	88ca      	ldrh	r2, [r1, #6]
 80023a0:	2a01      	cmp	r2, #1
 80023a2:	d1bb      	bne.n	800231c <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80023a4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d003      	beq.n	80023b4 <USBD_StdDevReq+0x198>
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d1b5      	bne.n	800231c <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80023b0:	1d01      	adds	r1, r0, #4
 80023b2:	e764      	b.n	800227e <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80023b4:	4601      	mov	r1, r0
 80023b6:	2300      	movs	r3, #0
 80023b8:	f841 3f08 	str.w	r3, [r1, #8]!
 80023bc:	e75f      	b.n	800227e <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80023be:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023c2:	3b02      	subs	r3, #2
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d8a9      	bhi.n	800231c <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80023c8:	2301      	movs	r3, #1
 80023ca:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80023cc:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80023d0:	b10b      	cbz	r3, 80023d6 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80023d2:	2303      	movs	r3, #3
 80023d4:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80023d6:	2202      	movs	r2, #2
 80023d8:	f104 010c 	add.w	r1, r4, #12
 80023dc:	e74f      	b.n	800227e <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80023de:	884b      	ldrh	r3, [r1, #2]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d1ab      	bne.n	800233c <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80023e4:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80023e8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80023ec:	4629      	mov	r1, r5
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4620      	mov	r0, r4
 80023f2:	4798      	blx	r3
 80023f4:	e7b9      	b.n	800236a <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80023f6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023fa:	3b02      	subs	r3, #2
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d88d      	bhi.n	800231c <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002400:	884b      	ldrh	r3, [r1, #2]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d19a      	bne.n	800233c <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002406:	2300      	movs	r3, #0
 8002408:	e7ec      	b.n	80023e4 <USBD_StdDevReq+0x1c8>
 800240a:	bf00      	nop
 800240c:	20000188 	.word	0x20000188

08002410 <USBD_StdItfReq>:
{
 8002410:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002412:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002416:	2b03      	cmp	r3, #3
{
 8002418:	4604      	mov	r4, r0
 800241a:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800241c:	d10d      	bne.n	800243a <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800241e:	790b      	ldrb	r3, [r1, #4]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d80a      	bhi.n	800243a <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002424:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800242c:	88eb      	ldrh	r3, [r5, #6]
 800242e:	b913      	cbnz	r3, 8002436 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002430:	4620      	mov	r0, r4
 8002432:	f000 f8cf 	bl	80025d4 <USBD_CtlSendStatus>
}
 8002436:	2000      	movs	r0, #0
 8002438:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800243a:	f7ff fee3 	bl	8002204 <USBD_CtlError.constprop.0>
    break;
 800243e:	e7fa      	b.n	8002436 <USBD_StdItfReq+0x26>

08002440 <USBD_StdEPReq>:
{
 8002440:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002442:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002444:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002446:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800244a:	2a20      	cmp	r2, #32
{
 800244c:	4604      	mov	r4, r0
 800244e:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002450:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002452:	d105      	bne.n	8002460 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002454:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4798      	blx	r3
}
 800245c:	2000      	movs	r0, #0
 800245e:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002460:	784a      	ldrb	r2, [r1, #1]
 8002462:	2a01      	cmp	r2, #1
 8002464:	d01c      	beq.n	80024a0 <USBD_StdEPReq+0x60>
 8002466:	d32a      	bcc.n	80024be <USBD_StdEPReq+0x7e>
 8002468:	2a03      	cmp	r2, #3
 800246a:	d1f7      	bne.n	800245c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800246c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002470:	2a02      	cmp	r2, #2
 8002472:	d040      	beq.n	80024f6 <USBD_StdEPReq+0xb6>
 8002474:	2a03      	cmp	r2, #3
 8002476:	d002      	beq.n	800247e <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002478:	f7ff fec4 	bl	8002204 <USBD_CtlError.constprop.0>
      break;
 800247c:	e7ee      	b.n	800245c <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800247e:	884a      	ldrh	r2, [r1, #2]
 8002480:	b922      	cbnz	r2, 800248c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002482:	065e      	lsls	r6, r3, #25
 8002484:	d002      	beq.n	800248c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002486:	4619      	mov	r1, r3
 8002488:	f000 fbd0 	bl	8002c2c <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800248c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002490:	4629      	mov	r1, r5
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4620      	mov	r0, r4
 8002496:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002498:	4620      	mov	r0, r4
 800249a:	f000 f89b 	bl	80025d4 <USBD_CtlSendStatus>
 800249e:	e7dd      	b.n	800245c <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80024a0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024a4:	2a02      	cmp	r2, #2
 80024a6:	d026      	beq.n	80024f6 <USBD_StdEPReq+0xb6>
 80024a8:	2a03      	cmp	r2, #3
 80024aa:	d1e5      	bne.n	8002478 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80024ac:	884a      	ldrh	r2, [r1, #2]
 80024ae:	2a00      	cmp	r2, #0
 80024b0:	d1d4      	bne.n	800245c <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80024b2:	0659      	lsls	r1, r3, #25
 80024b4:	d0f0      	beq.n	8002498 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80024b6:	4619      	mov	r1, r3
 80024b8:	f000 fbc6 	bl	8002c48 <USBD_LL_ClearStallEP>
 80024bc:	e7e6      	b.n	800248c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80024be:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024c2:	2a02      	cmp	r2, #2
 80024c4:	d017      	beq.n	80024f6 <USBD_StdEPReq+0xb6>
 80024c6:	2a03      	cmp	r2, #3
 80024c8:	d1d6      	bne.n	8002478 <USBD_StdEPReq+0x38>
 80024ca:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80024ce:	f016 0f80 	tst.w	r6, #128	; 0x80
 80024d2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80024d6:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80024d8:	bf14      	ite	ne
 80024da:	3514      	addne	r5, #20
 80024dc:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80024e0:	f000 fbc0 	bl	8002c64 <USBD_LL_IsStallEP>
 80024e4:	b168      	cbz	r0, 8002502 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80024e6:	2301      	movs	r3, #1
 80024e8:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80024ea:	2202      	movs	r2, #2
 80024ec:	4629      	mov	r1, r5
 80024ee:	4620      	mov	r0, r4
 80024f0:	f000 f844 	bl	800257c <USBD_CtlSendData>
      break;
 80024f4:	e7b2      	b.n	800245c <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80024f6:	065a      	lsls	r2, r3, #25
 80024f8:	d0b0      	beq.n	800245c <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80024fa:	4619      	mov	r1, r3
 80024fc:	f000 fb96 	bl	8002c2c <USBD_LL_StallEP>
 8002500:	e7ac      	b.n	800245c <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002502:	6028      	str	r0, [r5, #0]
 8002504:	e7f1      	b.n	80024ea <USBD_StdEPReq+0xaa>

08002506 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002506:	780b      	ldrb	r3, [r1, #0]
 8002508:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800250a:	784b      	ldrb	r3, [r1, #1]
 800250c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800250e:	78ca      	ldrb	r2, [r1, #3]
 8002510:	788b      	ldrb	r3, [r1, #2]
 8002512:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002516:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002518:	794a      	ldrb	r2, [r1, #5]
 800251a:	790b      	ldrb	r3, [r1, #4]
 800251c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002520:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002522:	79ca      	ldrb	r2, [r1, #7]
 8002524:	798b      	ldrb	r3, [r1, #6]
 8002526:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800252a:	80c3      	strh	r3, [r0, #6]
 800252c:	4770      	bx	lr

0800252e <USBD_CtlError>:
{
 800252e:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8002530:	2180      	movs	r1, #128	; 0x80
{
 8002532:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002534:	f000 fb7a 	bl	8002c2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002538:	4620      	mov	r0, r4
 800253a:	2100      	movs	r1, #0
}
 800253c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002540:	f000 bb74 	b.w	8002c2c <USBD_LL_StallEP>

08002544 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002544:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002546:	b188      	cbz	r0, 800256c <USBD_GetString+0x28>
 8002548:	4605      	mov	r5, r0
 800254a:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800254c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2c00      	cmp	r4, #0
 8002554:	d1f9      	bne.n	800254a <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	3302      	adds	r3, #2
 800255a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800255c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800255e:	2303      	movs	r3, #3
 8002560:	704b      	strb	r3, [r1, #1]
 8002562:	3801      	subs	r0, #1
 8002564:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8002566:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800256a:	b905      	cbnz	r5, 800256e <USBD_GetString+0x2a>
 800256c:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8002574:	3302      	adds	r3, #2
 8002576:	b2db      	uxtb	r3, r3
 8002578:	548c      	strb	r4, [r1, r2]
 800257a:	e7f4      	b.n	8002566 <USBD_GetString+0x22>

0800257c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800257c:	b510      	push	{r4, lr}
 800257e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002580:	2202      	movs	r2, #2
 8002582:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002586:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002588:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800258a:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800258c:	2100      	movs	r1, #0
 800258e:	f000 fb8b 	bl	8002ca8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002592:	2000      	movs	r0, #0
 8002594:	bd10      	pop	{r4, pc}

08002596 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002596:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002598:	4613      	mov	r3, r2
 800259a:	460a      	mov	r2, r1
 800259c:	2100      	movs	r1, #0
 800259e:	f000 fb83 	bl	8002ca8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80025a2:	2000      	movs	r0, #0
 80025a4:	bd08      	pop	{r3, pc}

080025a6 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80025a6:	b510      	push	{r4, lr}
 80025a8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80025aa:	2203      	movs	r2, #3
 80025ac:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80025b0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80025b4:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80025b6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80025ba:	2100      	movs	r1, #0
 80025bc:	f000 fb82 	bl	8002cc4 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80025c0:	2000      	movs	r0, #0
 80025c2:	bd10      	pop	{r4, pc}

080025c4 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80025c4:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80025c6:	4613      	mov	r3, r2
 80025c8:	460a      	mov	r2, r1
 80025ca:	2100      	movs	r1, #0
 80025cc:	f000 fb7a 	bl	8002cc4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80025d0:	2000      	movs	r0, #0
 80025d2:	bd08      	pop	{r3, pc}

080025d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80025d4:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80025d6:	2304      	movs	r3, #4
 80025d8:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80025dc:	2300      	movs	r3, #0
 80025de:	461a      	mov	r2, r3
 80025e0:	4619      	mov	r1, r3
 80025e2:	f000 fb61 	bl	8002ca8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80025e6:	2000      	movs	r0, #0
 80025e8:	bd08      	pop	{r3, pc}

080025ea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80025ea:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80025ec:	2305      	movs	r3, #5
 80025ee:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80025f2:	2300      	movs	r3, #0
 80025f4:	461a      	mov	r2, r3
 80025f6:	4619      	mov	r1, r3
 80025f8:	f000 fb64 	bl	8002cc4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80025fc:	2000      	movs	r0, #0
 80025fe:	bd08      	pop	{r3, pc}

08002600 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002600:	b530      	push	{r4, r5, lr}
 8002602:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 8002604:	2400      	movs	r4, #0
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <SystemClock_Config+0xa0>)
 8002608:	9401      	str	r4, [sp, #4]
 800260a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <SystemClock_Config+0xa4>)
 800261e:	9402      	str	r4, [sp, #8]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002632:	2301      	movs	r3, #1
 8002634:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800263a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800263c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002640:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002642:	2308      	movs	r3, #8
 8002644:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002646:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800264a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 800264c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800264e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002650:	2307      	movs	r3, #7
 8002652:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002654:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002656:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002658:	f7fe fd52 	bl	8001100 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
 800265c:	230d      	movs	r3, #13
 800265e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002664:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002666:	9306      	str	r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002668:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800266a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800266e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002670:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002672:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002674:	f7fe fef4 	bl	8001460 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002678:	f7fe ff8c 	bl	8001594 <HAL_RCC_GetHCLKFreq>
 800267c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002680:	fbb0 f0f3 	udiv	r0, r0, r3
 8002684:	f7fd ffde 	bl	8000644 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002688:	2004      	movs	r0, #4
 800268a:	f7fd fff1 	bl	8000670 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800268e:	4622      	mov	r2, r4
 8002690:	4621      	mov	r1, r4
 8002692:	f04f 30ff 	mov.w	r0, #4294967295
 8002696:	f7fd ff95 	bl	80005c4 <HAL_NVIC_SetPriority>
}
 800269a:	b015      	add	sp, #84	; 0x54
 800269c:	bd30      	pop	{r4, r5, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000

080026a8 <main>:
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOE_CLK_ENABLE();
 80026ac:	2400      	movs	r4, #0
  HAL_Init();
 80026ae:	f7fd ff37 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 80026b2:	f7ff ffa5 	bl	8002600 <SystemClock_Config>
  __GPIOE_CLK_ENABLE();
 80026b6:	4b87      	ldr	r3, [pc, #540]	; (80028d4 <main+0x22c>)
 80026b8:	9401      	str	r4, [sp, #4]
 80026ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80026bc:	4886      	ldr	r0, [pc, #536]	; (80028d8 <main+0x230>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80026be:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8002900 <main+0x258>
  __GPIOE_CLK_ENABLE();
 80026c2:	f042 0210 	orr.w	r2, r2, #16
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
 80026c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ca:	f002 0210 	and.w	r2, r2, #16
 80026ce:	9201      	str	r2, [sp, #4]
 80026d0:	9a01      	ldr	r2, [sp, #4]
  __GPIOC_CLK_ENABLE();
 80026d2:	9402      	str	r4, [sp, #8]
 80026d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d6:	f042 0204 	orr.w	r2, r2, #4
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
 80026dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026de:	f002 0204 	and.w	r2, r2, #4
 80026e2:	9202      	str	r2, [sp, #8]
 80026e4:	9a02      	ldr	r2, [sp, #8]
  __GPIOH_CLK_ENABLE();
 80026e6:	9403      	str	r4, [sp, #12]
 80026e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
 80026f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80026f6:	9203      	str	r2, [sp, #12]
 80026f8:	9a03      	ldr	r2, [sp, #12]
  __GPIOA_CLK_ENABLE();
 80026fa:	9404      	str	r4, [sp, #16]
 80026fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
 8002704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002706:	f002 0201 	and.w	r2, r2, #1
 800270a:	9204      	str	r2, [sp, #16]
 800270c:	9a04      	ldr	r2, [sp, #16]
  __GPIOB_CLK_ENABLE();
 800270e:	9405      	str	r4, [sp, #20]
 8002710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002712:	f042 0202 	orr.w	r2, r2, #2
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
 8002718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271a:	f002 0202 	and.w	r2, r2, #2
 800271e:	9205      	str	r2, [sp, #20]
 8002720:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 8002722:	9406      	str	r4, [sp, #24]
 8002724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002726:	f042 0208 	orr.w	r2, r2, #8
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	9409      	str	r4, [sp, #36]	; 0x24
  __GPIOD_CLK_ENABLE();
 8002730:	f003 0308 	and.w	r3, r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002736:	2508      	movs	r5, #8
  __GPIOD_CLK_ENABLE();
 8002738:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800273a:	a907      	add	r1, sp, #28
  __GPIOD_CLK_ENABLE();
 800273c:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800273e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002740:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002742:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002744:	f7fd ffa6 	bl	8000694 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002748:	a907      	add	r1, sp, #28
 800274a:	4864      	ldr	r0, [pc, #400]	; (80028dc <main+0x234>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800274e:	2705      	movs	r7, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002750:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002752:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002754:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002756:	f7fd ff9d 	bl	8000694 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800275a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800275c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2502      	movs	r5, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002760:	485e      	ldr	r0, [pc, #376]	; (80028dc <main+0x234>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002766:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002768:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800276a:	f7fd ff93 	bl	8000694 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800276e:	a907      	add	r1, sp, #28
 8002770:	485b      	ldr	r0, [pc, #364]	; (80028e0 <main+0x238>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	9409      	str	r4, [sp, #36]	; 0x24
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002774:	f04f 0a06 	mov.w	sl, #6
  GPIO_InitStruct.Pin = B1_Pin;
 8002778:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800277a:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800277e:	f7fd ff89 	bl	8000694 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002782:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	a907      	add	r1, sp, #28
 8002786:	4856      	ldr	r0, [pc, #344]	; (80028e0 <main+0x238>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002788:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800278e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002790:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002794:	f7fd ff7e 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002798:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	a907      	add	r1, sp, #28
 800279c:	4850      	ldr	r0, [pc, #320]	; (80028e0 <main+0x238>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800279e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80027a4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027a6:	970b      	str	r7, [sp, #44]	; 0x2c

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80027a8:	f04f 0904 	mov.w	r9, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f7fd ff72 	bl	8000694 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80027b0:	a907      	add	r1, sp, #28
 80027b2:	484c      	ldr	r0, [pc, #304]	; (80028e4 <main+0x23c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80027b8:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80027bc:	f7fd ff6a 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80027c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80027c4:	a907      	add	r1, sp, #28
 80027c6:	4847      	ldr	r0, [pc, #284]	; (80028e4 <main+0x23c>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80027c8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80027ce:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027d0:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80027d2:	f7fd ff5f 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80027d6:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027da:	a907      	add	r1, sp, #28
 80027dc:	4842      	ldr	r0, [pc, #264]	; (80028e8 <main+0x240>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80027de:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80027e2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e4:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e6:	f7fd ff55 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 I2S3_SCK_Pin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 80027ea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ee:	a907      	add	r1, sp, #28
 80027f0:	483a      	ldr	r0, [pc, #232]	; (80028dc <main+0x234>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 80027f2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80027f8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027fa:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fe:	f7fd ff49 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002802:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002804:	a907      	add	r1, sp, #28
 8002806:	4838      	ldr	r0, [pc, #224]	; (80028e8 <main+0x240>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002808:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800280e:	f7fd ff41 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002812:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002816:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002818:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800281a:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	4831      	ldr	r0, [pc, #196]	; (80028e4 <main+0x23c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800281e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002820:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002822:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002824:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f7fd ff34 	bl	8000694 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800282c:	a907      	add	r1, sp, #28
 800282e:	482a      	ldr	r0, [pc, #168]	; (80028d8 <main+0x230>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002830:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002834:	f8cd 8020 	str.w	r8, [sp, #32]
		if (USB_RX_Buffer[2] == '1') { // index -1 de celui de python
 8002838:	4f2c      	ldr	r7, [pc, #176]	; (80028ec <main+0x244>)
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800283a:	4c2b      	ldr	r4, [pc, #172]	; (80028e8 <main+0x240>)
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800283c:	f7fd ff2a 	bl	8000694 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002840:	f000 f8e6 	bl	8002a10 <MX_USB_DEVICE_Init>
 8002844:	463d      	mov	r5, r7
		if (USB_RX_Buffer[2] == '1') { // index -1 de celui de python
 8002846:	78bb      	ldrb	r3, [r7, #2]
 8002848:	4e29      	ldr	r6, [pc, #164]	; (80028f0 <main+0x248>)
 800284a:	2b31      	cmp	r3, #49	; 0x31
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Green LED ON
 800284c:	bf0c      	ite	eq
 800284e:	2201      	moveq	r2, #1
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002850:	2200      	movne	r2, #0
 8002852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002856:	4620      	mov	r0, r4
 8002858:	f7fe f802 	bl	8000860 <HAL_GPIO_WritePin>
		if (USB_RX_Buffer[3] == '1') {
 800285c:	78eb      	ldrb	r3, [r5, #3]
 800285e:	2b31      	cmp	r3, #49	; 0x31
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Orange LED ON
 8002860:	bf0c      	ite	eq
 8002862:	2201      	moveq	r2, #1
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002864:	2200      	movne	r2, #0
 8002866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800286a:	4620      	mov	r0, r4
 800286c:	f7fd fff8 	bl	8000860 <HAL_GPIO_WritePin>
		if (USB_RX_Buffer[4] == '1') {
 8002870:	792b      	ldrb	r3, [r5, #4]
 8002872:	2b31      	cmp	r3, #49	; 0x31
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Red LED ON
 8002874:	bf0c      	ite	eq
 8002876:	2201      	moveq	r2, #1
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002878:	2200      	movne	r2, #0
 800287a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800287e:	4620      	mov	r0, r4
 8002880:	f7fd ffee 	bl	8000860 <HAL_GPIO_WritePin>
		if (USB_RX_Buffer[5] == '1') {
 8002884:	796b      	ldrb	r3, [r5, #5]
 8002886:	2b31      	cmp	r3, #49	; 0x31
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // Blue LED ON
 8002888:	bf0c      	ite	eq
 800288a:	2201      	moveq	r2, #1
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800288c:	2200      	movne	r2, #0
 800288e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002892:	4620      	mov	r0, r4
 8002894:	f7fd ffe4 	bl	8000860 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) { // Read button
 8002898:	2101      	movs	r1, #1
 800289a:	4811      	ldr	r0, [pc, #68]	; (80028e0 <main+0x238>)
 800289c:	f7fd ffda 	bl	8000854 <HAL_GPIO_ReadPin>
 80028a0:	2801      	cmp	r0, #1
 80028a2:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <main+0x24c>)
 80028a4:	d113      	bne.n	80028ce <main+0x226>
			USB_TX_Buffer[1] = 1;
 80028a6:	7058      	strb	r0, [r3, #1]
			USBD_CUSTOM_HID_SendReport(hUsbDevice_0, "Button pressed\n", 64); // To send usb buffer to PC
 80028a8:	2240      	movs	r2, #64	; 0x40
 80028aa:	4913      	ldr	r1, [pc, #76]	; (80028f8 <main+0x250>)
 80028ac:	6830      	ldr	r0, [r6, #0]
 80028ae:	f7ff fb5f 	bl	8001f70 <USBD_CUSTOM_HID_SendReport>
			HAL_Delay(500);
 80028b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028b6:	f7fd fe5f 	bl	8000578 <HAL_Delay>
		USBD_CUSTOM_HID_SendReport(hUsbDevice_0, "Anh toan\n", 64);
 80028ba:	2240      	movs	r2, #64	; 0x40
 80028bc:	490f      	ldr	r1, [pc, #60]	; (80028fc <main+0x254>)
 80028be:	6830      	ldr	r0, [r6, #0]
 80028c0:	f7ff fb56 	bl	8001f70 <USBD_CUSTOM_HID_SendReport>
		HAL_Delay(500);
 80028c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028c8:	f7fd fe56 	bl	8000578 <HAL_Delay>
	while (1) {
 80028cc:	e7bb      	b.n	8002846 <main+0x19e>
			USB_TX_Buffer[1] = 0;
 80028ce:	2200      	movs	r2, #0
 80028d0:	705a      	strb	r2, [r3, #1]
 80028d2:	e7f2      	b.n	80028ba <main+0x212>
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020400 	.word	0x40020400
 80028e8:	40020c00 	.word	0x40020c00
 80028ec:	2000019c 	.word	0x2000019c
 80028f0:	20000830 	.word	0x20000830
 80028f4:	200001dc 	.word	0x200001dc
 80028f8:	0800302c 	.word	0x0800302c
 80028fc:	0800303c 	.word	0x0800303c
 8002900:	10120000 	.word	0x10120000

08002904 <_Error_Handler>:

}

#endif
void _Error_Handler(char * file, int line)
{
 8002904:	4770      	bx	lr
	...

08002908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002908:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_MspInit+0x8c>)
 800290c:	2400      	movs	r4, #0
 800290e:	9400      	str	r4, [sp, #0]
 8002910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002916:	645a      	str	r2, [r3, #68]	; 0x44
 8002918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800291a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800291e:	9200      	str	r2, [sp, #0]
 8002920:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	9401      	str	r4, [sp, #4]
 8002924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002926:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002934:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002936:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002938:	f7fd fe32 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800293c:	4622      	mov	r2, r4
 800293e:	4621      	mov	r1, r4
 8002940:	f06f 000b 	mvn.w	r0, #11
 8002944:	f7fd fe3e 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002948:	4622      	mov	r2, r4
 800294a:	4621      	mov	r1, r4
 800294c:	f06f 000a 	mvn.w	r0, #10
 8002950:	f7fd fe38 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002954:	4622      	mov	r2, r4
 8002956:	4621      	mov	r1, r4
 8002958:	f06f 0009 	mvn.w	r0, #9
 800295c:	f7fd fe32 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002960:	4622      	mov	r2, r4
 8002962:	4621      	mov	r1, r4
 8002964:	f06f 0004 	mvn.w	r0, #4
 8002968:	f7fd fe2c 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800296c:	4622      	mov	r2, r4
 800296e:	4621      	mov	r1, r4
 8002970:	f06f 0003 	mvn.w	r0, #3
 8002974:	f7fd fe26 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002978:	4622      	mov	r2, r4
 800297a:	4621      	mov	r1, r4
 800297c:	f06f 0001 	mvn.w	r0, #1
 8002980:	f7fd fe20 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002984:	4622      	mov	r2, r4
 8002986:	4621      	mov	r1, r4
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f7fd fe1a 	bl	80005c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002990:	b002      	add	sp, #8
 8002992:	bd10      	pop	{r4, pc}
 8002994:	40023800 	.word	0x40023800

08002998 <NMI_Handler>:
 8002998:	4770      	bx	lr

0800299a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800299a:	e7fe      	b.n	800299a <HardFault_Handler>

0800299c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800299c:	e7fe      	b.n	800299c <MemManage_Handler>

0800299e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800299e:	e7fe      	b.n	800299e <BusFault_Handler>

080029a0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80029a0:	e7fe      	b.n	80029a0 <UsageFault_Handler>

080029a2 <SVC_Handler>:
 80029a2:	4770      	bx	lr

080029a4 <DebugMon_Handler>:
 80029a4:	4770      	bx	lr

080029a6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80029a6:	4770      	bx	lr

080029a8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80029a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029aa:	f7fd fdd3 	bl	8000554 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80029b2:	f7fd be6a 	b.w	800068a <HAL_SYSTICK_IRQHandler>
	...

080029b8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029b8:	4801      	ldr	r0, [pc, #4]	; (80029c0 <OTG_FS_IRQHandler+0x8>)
 80029ba:	f7fd bfd7 	b.w	800096c <HAL_PCD_IRQHandler>
 80029be:	bf00      	nop
 80029c0:	20000440 	.word	0x20000440

080029c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c4:	490f      	ldr	r1, [pc, #60]	; (8002a04 <SystemInit+0x40>)
 80029c6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <SystemInit+0x44>)
 80029d4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029d6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80029de:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80029e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029ea:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80029ec:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <SystemInit+0x48>)
 80029ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029f6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80029f8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029fe:	608b      	str	r3, [r1, #8]
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	24003010 	.word	0x24003010

08002a10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002a10:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002a12:	4c09      	ldr	r4, [pc, #36]	; (8002a38 <MX_USB_DEVICE_Init+0x28>)
 8002a14:	4909      	ldr	r1, [pc, #36]	; (8002a3c <MX_USB_DEVICE_Init+0x2c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff fac4 	bl	8001fa6 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <MX_USB_DEVICE_Init+0x30>)
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7ff fad5 	bl	8001fd0 <USBD_RegisterClass>

  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 8002a26:	4620      	mov	r0, r4
 8002a28:	4906      	ldr	r1, [pc, #24]	; (8002a44 <MX_USB_DEVICE_Init+0x34>)
 8002a2a:	f7ff fab5 	bl	8001f98 <USBD_CUSTOM_HID_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8002a2e:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8002a34:	f7ff bad3 	b.w	8001fde <USBD_Start>
 8002a38:	2000021c 	.word	0x2000021c
 8002a3c:	200000d4 	.word	0x200000d4
 8002a40:	20000008 	.word	0x20000008
 8002a44:	200000c4 	.word	0x200000c4

08002a48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002a48:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8002a4a:	6803      	ldr	r3, [r0, #0]
 8002a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8002a50:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 8002a52:	d12d      	bne.n	8002ab0 <HAL_PCD_MspInit+0x68>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a54:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002a56:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	a901      	add	r1, sp, #4
 8002a5c:	4815      	ldr	r0, [pc, #84]	; (8002ab4 <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002a5e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a60:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f7fd fe16 	bl	8000694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002a68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a6c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a72:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a74:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	480f      	ldr	r0, [pc, #60]	; (8002ab4 <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a78:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	f7fd fe09 	bl	8000694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_PCD_MspInit+0x70>)
 8002a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a8c:	9400      	str	r4, [sp, #0]
 8002a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9c:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002a9e:	2043      	movs	r0, #67	; 0x43
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002aa4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8002aa6:	f7fd fd8d 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002aaa:	2043      	movs	r0, #67	; 0x43
 8002aac:	f7fd fdbe 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002ab0:	b006      	add	sp, #24
 8002ab2:	bd10      	pop	{r4, pc}
 8002ab4:	40020000 	.word	0x40020000
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002abc:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8002ac0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002ac4:	f7ff baa2 	b.w	800200c <USBD_LL_SetupStage>

08002ac8 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002ac8:	231c      	movs	r3, #28
 8002aca:	fb03 0301 	mla	r3, r3, r1, r0
 8002ace:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002ad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ad6:	f7ff bac6 	b.w	8002066 <USBD_LL_DataOutStage>

08002ada <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002ada:	231c      	movs	r3, #28
 8002adc:	fb03 0301 	mla	r3, r3, r1, r0
 8002ae0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ae6:	f7ff baf0 	b.w	80020ca <USBD_LL_DataInStage>

08002aea <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002aea:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002aee:	f7ff bb6c 	b.w	80021ca <USBD_LL_SOF>

08002af2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002af2:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8002af4:	68c1      	ldr	r1, [r0, #12]
{ 
 8002af6:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002af8:	3100      	adds	r1, #0
 8002afa:	bf18      	it	ne
 8002afc:	2101      	movne	r1, #1
 8002afe:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002b02:	f7ff fb50 	bl	80021a6 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002b06:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8002b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002b0e:	f7ff bb2b 	b.w	8002168 <USBD_LL_Reset>
	...

08002b14 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002b14:	b510      	push	{r4, lr}
 8002b16:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002b18:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002b1c:	f7ff fb46 	bl	80021ac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8002b20:	6822      	ldr	r2, [r4, #0]
 8002b22:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002b2e:	6a23      	ldr	r3, [r4, #32]
 8002b30:	b123      	cbz	r3, 8002b3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002b32:	4a03      	ldr	r2, [pc, #12]	; (8002b40 <HAL_PCD_SuspendCallback+0x2c>)
 8002b34:	6913      	ldr	r3, [r2, #16]
 8002b36:	f043 0306 	orr.w	r3, r3, #6
 8002b3a:	6113      	str	r3, [r2, #16]
 8002b3c:	bd10      	pop	{r4, pc}
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002b44:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002b48:	f7ff bb39 	b.w	80021be <USBD_LL_Resume>

08002b4c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8002b4c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002b50:	f7ff bb49 	b.w	80021e6 <USBD_LL_IsoOUTIncomplete>

08002b54 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8002b54:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002b58:	f7ff bb43 	b.w	80021e2 <USBD_LL_IsoINIncomplete>

08002b5c <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8002b5c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002b60:	f7ff bb43 	b.w	80021ea <USBD_LL_DevConnected>

08002b64 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8002b64:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002b68:	f7ff bb41 	b.w	80021ee <USBD_LL_DevDisconnected>

08002b6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002b6c:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8002b6e:	7802      	ldrb	r2, [r0, #0]
 8002b70:	bb52      	cbnz	r2, 8002bc8 <USBD_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <USBD_LL_Init+0x60>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002b74:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 8002b76:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 8002b7a:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002b7e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b82:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002b86:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002b88:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002b8a:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002b8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8002b8e:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b90:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002b92:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002b94:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002b9c:	f7fd fe65 	bl	800086a <HAL_PCD_Init>
 8002ba0:	b120      	cbz	r0, 8002bac <USBD_LL_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ba2:	f240 1153 	movw	r1, #339	; 0x153
 8002ba6:	480a      	ldr	r0, [pc, #40]	; (8002bd0 <USBD_LL_Init+0x64>)
 8002ba8:	f7ff feac 	bl	8002904 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	4807      	ldr	r0, [pc, #28]	; (8002bcc <USBD_LL_Init+0x60>)
 8002bb0:	f7fe faa1 	bl	80010f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4804      	ldr	r0, [pc, #16]	; (8002bcc <USBD_LL_Init+0x60>)
 8002bba:	f7fe fa7b 	bl	80010b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4802      	ldr	r0, [pc, #8]	; (8002bcc <USBD_LL_Init+0x60>)
 8002bc4:	f7fe fa76 	bl	80010b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8002bc8:	2000      	movs	r0, #0
 8002bca:	bd08      	pop	{r3, pc}
 8002bcc:	20000440 	.word	0x20000440
 8002bd0:	0800305a 	.word	0x0800305a

08002bd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002bd4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002bd6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002bda:	f7fd feb2 	bl	8000942 <HAL_PCD_Start>
 8002bde:	2803      	cmp	r0, #3
 8002be0:	bf9a      	itte	ls
 8002be2:	4b02      	ldrls	r3, [pc, #8]	; (8002bec <USBD_LL_Start+0x18>)
 8002be4:	5c18      	ldrbls	r0, [r3, r0]
 8002be6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002be8:	bd08      	pop	{r3, pc}
 8002bea:	bf00      	nop
 8002bec:	08003056 	.word	0x08003056

08002bf0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002bf0:	b510      	push	{r4, lr}
 8002bf2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002bf4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	4622      	mov	r2, r4
 8002bfc:	f7fe f974 	bl	8000ee8 <HAL_PCD_EP_Open>
 8002c00:	2803      	cmp	r0, #3
 8002c02:	bf9a      	itte	ls
 8002c04:	4b01      	ldrls	r3, [pc, #4]	; (8002c0c <USBD_LL_OpenEP+0x1c>)
 8002c06:	5c18      	ldrbls	r0, [r3, r0]
 8002c08:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002c0a:	bd10      	pop	{r4, pc}
 8002c0c:	08003056 	.word	0x08003056

08002c10 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002c10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002c12:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c16:	f7fe f995 	bl	8000f44 <HAL_PCD_EP_Close>
 8002c1a:	2803      	cmp	r0, #3
 8002c1c:	bf9a      	itte	ls
 8002c1e:	4b02      	ldrls	r3, [pc, #8]	; (8002c28 <USBD_LL_CloseEP+0x18>)
 8002c20:	5c18      	ldrbls	r0, [r3, r0]
 8002c22:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002c24:	bd08      	pop	{r3, pc}
 8002c26:	bf00      	nop
 8002c28:	08003056 	.word	0x08003056

08002c2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002c2c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002c2e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c32:	f7fe f9ee 	bl	8001012 <HAL_PCD_EP_SetStall>
 8002c36:	2803      	cmp	r0, #3
 8002c38:	bf9a      	itte	ls
 8002c3a:	4b02      	ldrls	r3, [pc, #8]	; (8002c44 <USBD_LL_StallEP+0x18>)
 8002c3c:	5c18      	ldrbls	r0, [r3, r0]
 8002c3e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002c40:	bd08      	pop	{r3, pc}
 8002c42:	bf00      	nop
 8002c44:	08003056 	.word	0x08003056

08002c48 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002c48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002c4a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c4e:	f7fe fa0c 	bl	800106a <HAL_PCD_EP_ClrStall>
 8002c52:	2803      	cmp	r0, #3
 8002c54:	bf9a      	itte	ls
 8002c56:	4b02      	ldrls	r3, [pc, #8]	; (8002c60 <USBD_LL_ClearStallEP+0x18>)
 8002c58:	5c18      	ldrbls	r0, [r3, r0]
 8002c5a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002c5c:	bd08      	pop	{r3, pc}
 8002c5e:	bf00      	nop
 8002c60:	08003056 	.word	0x08003056

08002c64 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002c64:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002c68:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8002c6c:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002c70:	bf1b      	ittet	ne
 8002c72:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8002c76:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002c7a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002c7e:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002c82:	bf08      	it	eq
 8002c84:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8002c88:	4770      	bx	lr
	...

08002c8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002c8c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002c8e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c92:	f7fe f917 	bl	8000ec4 <HAL_PCD_SetAddress>
 8002c96:	2803      	cmp	r0, #3
 8002c98:	bf9a      	itte	ls
 8002c9a:	4b02      	ldrls	r3, [pc, #8]	; (8002ca4 <USBD_LL_SetUSBAddress+0x18>)
 8002c9c:	5c18      	ldrbls	r0, [r3, r0]
 8002c9e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002ca0:	bd08      	pop	{r3, pc}
 8002ca2:	bf00      	nop
 8002ca4:	08003056 	.word	0x08003056

08002ca8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002ca8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002caa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002cae:	f7fe f990 	bl	8000fd2 <HAL_PCD_EP_Transmit>
 8002cb2:	2803      	cmp	r0, #3
 8002cb4:	bf9a      	itte	ls
 8002cb6:	4b02      	ldrls	r3, [pc, #8]	; (8002cc0 <USBD_LL_Transmit+0x18>)
 8002cb8:	5c18      	ldrbls	r0, [r3, r0]
 8002cba:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002cbc:	bd08      	pop	{r3, pc}
 8002cbe:	bf00      	nop
 8002cc0:	08003056 	.word	0x08003056

08002cc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002cc4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002cc6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002cca:	f7fe f95e 	bl	8000f8a <HAL_PCD_EP_Receive>
 8002cce:	2803      	cmp	r0, #3
 8002cd0:	bf9a      	itte	ls
 8002cd2:	4b02      	ldrls	r3, [pc, #8]	; (8002cdc <USBD_LL_PrepareReceive+0x18>)
 8002cd4:	5c18      	ldrbls	r0, [r3, r0]
 8002cd6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002cd8:	bd08      	pop	{r3, pc}
 8002cda:	bf00      	nop
 8002cdc:	08003056 	.word	0x08003056

08002ce0 <CUSTOM_HID_Init_FS>:
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
  hUsbDevice_0 = &hUsbDeviceFS;
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <CUSTOM_HID_Init_FS+0xc>)
 8002ce2:	4a03      	ldr	r2, [pc, #12]	; (8002cf0 <CUSTOM_HID_Init_FS+0x10>)
 8002ce4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN 4 */
  return (0);
  /* USER CODE END 4 */
}
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000830 	.word	0x20000830
 8002cf0:	2000021c 	.word	0x2000021c

08002cf4 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (0);
  /* USER CODE END 5 */
}
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	4770      	bx	lr

08002cf8 <CUSTOM_HID_OutEvent_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS  (uint8_t event_idx, uint8_t state)
{
  /* USER CODE BEGIN 6 */
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDevice_0->pClassData;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <CUSTOM_HID_OutEvent_FS+0x1c>)

  for (uint8_t i = 0; i < 64; i++)
  {
    USB_RX_Buffer[i] = hhid->Report_buf[i]; // To read usb data from PC
 8002cfa:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <CUSTOM_HID_OutEvent_FS+0x20>)
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDevice_0->pClassData;
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
 8002d02:	2300      	movs	r3, #0
    USB_RX_Buffer[i] = hhid->Report_buf[i]; // To read usb data from PC
 8002d04:	5cc1      	ldrb	r1, [r0, r3]
 8002d06:	5499      	strb	r1, [r3, r2]
 8002d08:	3301      	adds	r3, #1
  for (uint8_t i = 0; i < 64; i++)
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d1fa      	bne.n	8002d04 <CUSTOM_HID_OutEvent_FS+0xc>
  }

  return (0);
  /* USER CODE END 6 */
}
 8002d0e:	2000      	movs	r0, #0
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000830 	.word	0x20000830
 8002d18:	2000019c 	.word	0x2000019c

08002d1c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002d1c:	2312      	movs	r3, #18
 8002d1e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8002d20:	4800      	ldr	r0, [pc, #0]	; (8002d24 <USBD_FS_DeviceDescriptor+0x8>)
 8002d22:	4770      	bx	lr
 8002d24:	200000f0 	.word	0x200000f0

08002d28 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8002d28:	2304      	movs	r3, #4
 8002d2a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8002d2c:	4800      	ldr	r0, [pc, #0]	; (8002d30 <USBD_FS_LangIDStrDescriptor+0x8>)
 8002d2e:	4770      	bx	lr
 8002d30:	20000104 	.word	0x20000104

08002d34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002d34:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002d36:	4c04      	ldr	r4, [pc, #16]	; (8002d48 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002d38:	4804      	ldr	r0, [pc, #16]	; (8002d4c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002d3a:	460a      	mov	r2, r1
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	f7ff fc01 	bl	8002544 <USBD_GetString>
  return USBD_StrDesc;
}
 8002d42:	4620      	mov	r0, r4
 8002d44:	bd10      	pop	{r4, pc}
 8002d46:	bf00      	nop
 8002d48:	20000834 	.word	0x20000834
 8002d4c:	08003094 	.word	0x08003094

08002d50 <USBD_FS_ProductStrDescriptor>:
{
 8002d50:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002d52:	4c04      	ldr	r4, [pc, #16]	; (8002d64 <USBD_FS_ProductStrDescriptor+0x14>)
 8002d54:	4804      	ldr	r0, [pc, #16]	; (8002d68 <USBD_FS_ProductStrDescriptor+0x18>)
 8002d56:	460a      	mov	r2, r1
 8002d58:	4621      	mov	r1, r4
 8002d5a:	f7ff fbf3 	bl	8002544 <USBD_GetString>
}
 8002d5e:	4620      	mov	r0, r4
 8002d60:	bd10      	pop	{r4, pc}
 8002d62:	bf00      	nop
 8002d64:	20000834 	.word	0x20000834
 8002d68:	080030a2 	.word	0x080030a2

08002d6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002d6c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002d6e:	4c04      	ldr	r4, [pc, #16]	; (8002d80 <USBD_FS_SerialStrDescriptor+0x14>)
 8002d70:	4804      	ldr	r0, [pc, #16]	; (8002d84 <USBD_FS_SerialStrDescriptor+0x18>)
 8002d72:	460a      	mov	r2, r1
 8002d74:	4621      	mov	r1, r4
 8002d76:	f7ff fbe5 	bl	8002544 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	bd10      	pop	{r4, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000834 	.word	0x20000834
 8002d84:	080030bf 	.word	0x080030bf

08002d88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002d88:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002d8a:	4c04      	ldr	r4, [pc, #16]	; (8002d9c <USBD_FS_ConfigStrDescriptor+0x14>)
 8002d8c:	4804      	ldr	r0, [pc, #16]	; (8002da0 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002d8e:	460a      	mov	r2, r1
 8002d90:	4621      	mov	r1, r4
 8002d92:	f7ff fbd7 	bl	8002544 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002d96:	4620      	mov	r0, r4
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000834 	.word	0x20000834
 8002da0:	0800306d 	.word	0x0800306d

08002da4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002da4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002da6:	4c04      	ldr	r4, [pc, #16]	; (8002db8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002da8:	4804      	ldr	r0, [pc, #16]	; (8002dbc <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002daa:	460a      	mov	r2, r1
 8002dac:	4621      	mov	r1, r4
 8002dae:	f7ff fbc9 	bl	8002544 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002db2:	4620      	mov	r0, r4
 8002db4:	bd10      	pop	{r4, pc}
 8002db6:	bf00      	nop
 8002db8:	20000834 	.word	0x20000834
 8002dbc:	0800307f 	.word	0x0800307f

08002dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002df8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002dc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dc6:	e003      	b.n	8002dd0 <LoopCopyDataInit>

08002dc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002dca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002dcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dce:	3104      	adds	r1, #4

08002dd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dd0:	480b      	ldr	r0, [pc, #44]	; (8002e00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002dd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dd8:	d3f6      	bcc.n	8002dc8 <CopyDataInit>
  ldr  r2, =_sbss
 8002dda:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ddc:	e002      	b.n	8002de4 <LoopFillZerobss>

08002dde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002de0:	f842 3b04 	str.w	r3, [r2], #4

08002de4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002de6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002de8:	d3f9      	bcc.n	8002dde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dea:	f7ff fdeb 	bl	80029c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dee:	f000 f811 	bl	8002e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002df2:	f7ff fc59 	bl	80026a8 <main>
  bx  lr    
 8002df6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002df8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002dfc:	080030dc 	.word	0x080030dc
  ldr  r0, =_sdata
 8002e00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e04:	2000016c 	.word	0x2000016c
  ldr  r2, =_sbss
 8002e08:	2000016c 	.word	0x2000016c
  ldr  r3, = _ebss
 8002e0c:	20000a38 	.word	0x20000a38

08002e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e10:	e7fe      	b.n	8002e10 <ADC_IRQHandler>
	...

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	4e0d      	ldr	r6, [pc, #52]	; (8002e4c <__libc_init_array+0x38>)
 8002e18:	4c0d      	ldr	r4, [pc, #52]	; (8002e50 <__libc_init_array+0x3c>)
 8002e1a:	1ba4      	subs	r4, r4, r6
 8002e1c:	10a4      	asrs	r4, r4, #2
 8002e1e:	2500      	movs	r5, #0
 8002e20:	42a5      	cmp	r5, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	4e0b      	ldr	r6, [pc, #44]	; (8002e54 <__libc_init_array+0x40>)
 8002e26:	4c0c      	ldr	r4, [pc, #48]	; (8002e58 <__libc_init_array+0x44>)
 8002e28:	f000 f8f4 	bl	8003014 <_init>
 8002e2c:	1ba4      	subs	r4, r4, r6
 8002e2e:	10a4      	asrs	r4, r4, #2
 8002e30:	2500      	movs	r5, #0
 8002e32:	42a5      	cmp	r5, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e3c:	4798      	blx	r3
 8002e3e:	3501      	adds	r5, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e46:	4798      	blx	r3
 8002e48:	3501      	adds	r5, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	080030d4 	.word	0x080030d4
 8002e50:	080030d4 	.word	0x080030d4
 8002e54:	080030d4 	.word	0x080030d4
 8002e58:	080030d8 	.word	0x080030d8

08002e5c <malloc>:
 8002e5c:	4b02      	ldr	r3, [pc, #8]	; (8002e68 <malloc+0xc>)
 8002e5e:	4601      	mov	r1, r0
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	f000 b859 	b.w	8002f18 <_malloc_r>
 8002e66:	bf00      	nop
 8002e68:	20000108 	.word	0x20000108

08002e6c <free>:
 8002e6c:	4b02      	ldr	r3, [pc, #8]	; (8002e78 <free+0xc>)
 8002e6e:	4601      	mov	r1, r0
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	f000 b803 	b.w	8002e7c <_free_r>
 8002e76:	bf00      	nop
 8002e78:	20000108 	.word	0x20000108

08002e7c <_free_r>:
 8002e7c:	b538      	push	{r3, r4, r5, lr}
 8002e7e:	4605      	mov	r5, r0
 8002e80:	2900      	cmp	r1, #0
 8002e82:	d045      	beq.n	8002f10 <_free_r+0x94>
 8002e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e88:	1f0c      	subs	r4, r1, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bfb8      	it	lt
 8002e8e:	18e4      	addlt	r4, r4, r3
 8002e90:	f000 f8b0 	bl	8002ff4 <__malloc_lock>
 8002e94:	4a1f      	ldr	r2, [pc, #124]	; (8002f14 <_free_r+0x98>)
 8002e96:	6813      	ldr	r3, [r2, #0]
 8002e98:	4610      	mov	r0, r2
 8002e9a:	b933      	cbnz	r3, 8002eaa <_free_r+0x2e>
 8002e9c:	6063      	str	r3, [r4, #4]
 8002e9e:	6014      	str	r4, [r2, #0]
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ea6:	f000 b8a6 	b.w	8002ff6 <__malloc_unlock>
 8002eaa:	42a3      	cmp	r3, r4
 8002eac:	d90c      	bls.n	8002ec8 <_free_r+0x4c>
 8002eae:	6821      	ldr	r1, [r4, #0]
 8002eb0:	1862      	adds	r2, r4, r1
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	bf04      	itt	eq
 8002eb6:	681a      	ldreq	r2, [r3, #0]
 8002eb8:	685b      	ldreq	r3, [r3, #4]
 8002eba:	6063      	str	r3, [r4, #4]
 8002ebc:	bf04      	itt	eq
 8002ebe:	1852      	addeq	r2, r2, r1
 8002ec0:	6022      	streq	r2, [r4, #0]
 8002ec2:	6004      	str	r4, [r0, #0]
 8002ec4:	e7ec      	b.n	8002ea0 <_free_r+0x24>
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	b10a      	cbz	r2, 8002ed0 <_free_r+0x54>
 8002ecc:	42a2      	cmp	r2, r4
 8002ece:	d9fa      	bls.n	8002ec6 <_free_r+0x4a>
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	1858      	adds	r0, r3, r1
 8002ed4:	42a0      	cmp	r0, r4
 8002ed6:	d10b      	bne.n	8002ef0 <_free_r+0x74>
 8002ed8:	6820      	ldr	r0, [r4, #0]
 8002eda:	4401      	add	r1, r0
 8002edc:	1858      	adds	r0, r3, r1
 8002ede:	4282      	cmp	r2, r0
 8002ee0:	6019      	str	r1, [r3, #0]
 8002ee2:	d1dd      	bne.n	8002ea0 <_free_r+0x24>
 8002ee4:	6810      	ldr	r0, [r2, #0]
 8002ee6:	6852      	ldr	r2, [r2, #4]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	4401      	add	r1, r0
 8002eec:	6019      	str	r1, [r3, #0]
 8002eee:	e7d7      	b.n	8002ea0 <_free_r+0x24>
 8002ef0:	d902      	bls.n	8002ef8 <_free_r+0x7c>
 8002ef2:	230c      	movs	r3, #12
 8002ef4:	602b      	str	r3, [r5, #0]
 8002ef6:	e7d3      	b.n	8002ea0 <_free_r+0x24>
 8002ef8:	6820      	ldr	r0, [r4, #0]
 8002efa:	1821      	adds	r1, r4, r0
 8002efc:	428a      	cmp	r2, r1
 8002efe:	bf04      	itt	eq
 8002f00:	6811      	ldreq	r1, [r2, #0]
 8002f02:	6852      	ldreq	r2, [r2, #4]
 8002f04:	6062      	str	r2, [r4, #4]
 8002f06:	bf04      	itt	eq
 8002f08:	1809      	addeq	r1, r1, r0
 8002f0a:	6021      	streq	r1, [r4, #0]
 8002f0c:	605c      	str	r4, [r3, #4]
 8002f0e:	e7c7      	b.n	8002ea0 <_free_r+0x24>
 8002f10:	bd38      	pop	{r3, r4, r5, pc}
 8002f12:	bf00      	nop
 8002f14:	2000018c 	.word	0x2000018c

08002f18 <_malloc_r>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	1ccd      	adds	r5, r1, #3
 8002f1c:	f025 0503 	bic.w	r5, r5, #3
 8002f20:	3508      	adds	r5, #8
 8002f22:	2d0c      	cmp	r5, #12
 8002f24:	bf38      	it	cc
 8002f26:	250c      	movcc	r5, #12
 8002f28:	2d00      	cmp	r5, #0
 8002f2a:	4606      	mov	r6, r0
 8002f2c:	db01      	blt.n	8002f32 <_malloc_r+0x1a>
 8002f2e:	42a9      	cmp	r1, r5
 8002f30:	d903      	bls.n	8002f3a <_malloc_r+0x22>
 8002f32:	230c      	movs	r3, #12
 8002f34:	6033      	str	r3, [r6, #0]
 8002f36:	2000      	movs	r0, #0
 8002f38:	bd70      	pop	{r4, r5, r6, pc}
 8002f3a:	f000 f85b 	bl	8002ff4 <__malloc_lock>
 8002f3e:	4a23      	ldr	r2, [pc, #140]	; (8002fcc <_malloc_r+0xb4>)
 8002f40:	6814      	ldr	r4, [r2, #0]
 8002f42:	4621      	mov	r1, r4
 8002f44:	b991      	cbnz	r1, 8002f6c <_malloc_r+0x54>
 8002f46:	4c22      	ldr	r4, [pc, #136]	; (8002fd0 <_malloc_r+0xb8>)
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	b91b      	cbnz	r3, 8002f54 <_malloc_r+0x3c>
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	f000 f841 	bl	8002fd4 <_sbrk_r>
 8002f52:	6020      	str	r0, [r4, #0]
 8002f54:	4629      	mov	r1, r5
 8002f56:	4630      	mov	r0, r6
 8002f58:	f000 f83c 	bl	8002fd4 <_sbrk_r>
 8002f5c:	1c43      	adds	r3, r0, #1
 8002f5e:	d126      	bne.n	8002fae <_malloc_r+0x96>
 8002f60:	230c      	movs	r3, #12
 8002f62:	6033      	str	r3, [r6, #0]
 8002f64:	4630      	mov	r0, r6
 8002f66:	f000 f846 	bl	8002ff6 <__malloc_unlock>
 8002f6a:	e7e4      	b.n	8002f36 <_malloc_r+0x1e>
 8002f6c:	680b      	ldr	r3, [r1, #0]
 8002f6e:	1b5b      	subs	r3, r3, r5
 8002f70:	d41a      	bmi.n	8002fa8 <_malloc_r+0x90>
 8002f72:	2b0b      	cmp	r3, #11
 8002f74:	d90f      	bls.n	8002f96 <_malloc_r+0x7e>
 8002f76:	600b      	str	r3, [r1, #0]
 8002f78:	50cd      	str	r5, [r1, r3]
 8002f7a:	18cc      	adds	r4, r1, r3
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f000 f83a 	bl	8002ff6 <__malloc_unlock>
 8002f82:	f104 000b 	add.w	r0, r4, #11
 8002f86:	1d23      	adds	r3, r4, #4
 8002f88:	f020 0007 	bic.w	r0, r0, #7
 8002f8c:	1ac3      	subs	r3, r0, r3
 8002f8e:	d01b      	beq.n	8002fc8 <_malloc_r+0xb0>
 8002f90:	425a      	negs	r2, r3
 8002f92:	50e2      	str	r2, [r4, r3]
 8002f94:	bd70      	pop	{r4, r5, r6, pc}
 8002f96:	428c      	cmp	r4, r1
 8002f98:	bf0d      	iteet	eq
 8002f9a:	6863      	ldreq	r3, [r4, #4]
 8002f9c:	684b      	ldrne	r3, [r1, #4]
 8002f9e:	6063      	strne	r3, [r4, #4]
 8002fa0:	6013      	streq	r3, [r2, #0]
 8002fa2:	bf18      	it	ne
 8002fa4:	460c      	movne	r4, r1
 8002fa6:	e7e9      	b.n	8002f7c <_malloc_r+0x64>
 8002fa8:	460c      	mov	r4, r1
 8002faa:	6849      	ldr	r1, [r1, #4]
 8002fac:	e7ca      	b.n	8002f44 <_malloc_r+0x2c>
 8002fae:	1cc4      	adds	r4, r0, #3
 8002fb0:	f024 0403 	bic.w	r4, r4, #3
 8002fb4:	42a0      	cmp	r0, r4
 8002fb6:	d005      	beq.n	8002fc4 <_malloc_r+0xac>
 8002fb8:	1a21      	subs	r1, r4, r0
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f000 f80a 	bl	8002fd4 <_sbrk_r>
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	d0cd      	beq.n	8002f60 <_malloc_r+0x48>
 8002fc4:	6025      	str	r5, [r4, #0]
 8002fc6:	e7d9      	b.n	8002f7c <_malloc_r+0x64>
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
 8002fca:	bf00      	nop
 8002fcc:	2000018c 	.word	0x2000018c
 8002fd0:	20000190 	.word	0x20000190

08002fd4 <_sbrk_r>:
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	4c06      	ldr	r4, [pc, #24]	; (8002ff0 <_sbrk_r+0x1c>)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	4605      	mov	r5, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	6023      	str	r3, [r4, #0]
 8002fe0:	f000 f80a 	bl	8002ff8 <_sbrk>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	d102      	bne.n	8002fee <_sbrk_r+0x1a>
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	b103      	cbz	r3, 8002fee <_sbrk_r+0x1a>
 8002fec:	602b      	str	r3, [r5, #0]
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
 8002ff0:	20000a34 	.word	0x20000a34

08002ff4 <__malloc_lock>:
 8002ff4:	4770      	bx	lr

08002ff6 <__malloc_unlock>:
 8002ff6:	4770      	bx	lr

08002ff8 <_sbrk>:
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <_sbrk+0x14>)
 8002ffa:	6819      	ldr	r1, [r3, #0]
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	b909      	cbnz	r1, 8003004 <_sbrk+0xc>
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <_sbrk+0x18>)
 8003002:	6019      	str	r1, [r3, #0]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	4402      	add	r2, r0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	4770      	bx	lr
 800300c:	20000194 	.word	0x20000194
 8003010:	20000a38 	.word	0x20000a38

08003014 <_init>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr

08003020 <_fini>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr
